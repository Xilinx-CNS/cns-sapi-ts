# SPDX-License-Identifier: Apache-2.0
# (c) Copyright 2004 - 2022 Xilinx, Inc. All rights reserved.

basic_lib_dir = include_directories('lib')

basic_test_deps = test_deps
basic_test_deps += declare_dependency(include_directories: basic_lib_dir)

tests = [
    'accept_multiple',
    'accept_order',
    'bind_reuse',
    'bind_sockaddr_recv',
    'bind_sockaddr_send',
    'bind_two_nets',
    'chroot_socket',
    'close_bound',
    'close_created',
    'close_listen_pending',
    'close_listening',
    'close_on_exec',
    'close_sock_oth_thread',
    'connect_after_fault',
    'connect_failed_func',
    'connect_influence_sendto',
    'connect_interrupted',
    'connections_on_aliases',
    'data_before_accept',
    'default_bind_connect',
    'default_bind_listen',
    'default_bind_sendto',
    'derived_bind',
    'derived_bindtodevice',
    'derived_connect',
    'destination_as_bound',
    'dgram_bind_connect_addr',
    'dgram_bind_connect_names',
    'dgram_crd_bound_lb',
    'dgram_crd_bound_wc',
    'dgram_crd_unbound',
    'diff_ipvlan_macvlan_check',
    'exec_bound',
    'exec_conn',
    'exec_created',
    'exec_dup',
    'exec_fork_multiple',
    'exec_fork_multithread',
    'exec_fork_traffic',
    'exec_listening',
    'fork_bound',
    'fork_conn_dgm',
    'fork_conn_str',
    'fork_created',
    'fork_kill',
    'fork_listening',
    'fork_nb_receive',
    'fork_share_sock',
    'get_sock_peer_name_dgm',
    'get_sock_peer_name_str',
    'ipv6_ipv4_reuse',
    'ipv6_recv_ip',
    'ipv6_send_ip',
    'kill_lock_stack',
    'listen_accept_close',
    'listen_backlog_values',
    'listen_shutdown_connect',
    'listen_shutdown_listen',
    'listen_shutdown_pending',
    'listen_shutdown_wr',
    'listen_via_af_unix',
    'many_listen_connect_lo',
    'many_pipes',
    'many_sockets',
    'mtu_usage',
    'pipe_become_writable',
    'pipe_big_buffer_read',
    'pipe_big_buffer_write',
    'pipe_close_on_exec',
    'pipe_close_read',
    'pipe_close_write',
    'pipe_merge_buf',
    'pipe_read_nonblock',
    'pipe_rw_rnd_len',
    'pipe_socket_interact',
    'pipe_via_af_unix',
    'pipe_write_and_close',
    'pipe_write_block',
    'pipe_write_nonblock',
    'pipe_writev_readv',
    'popen_multithread_flood',
    'pthread_cancellation_point',
    'reuseport_bind_zero_port',
    'rst_before_accept',
    'shutdown_dgm_all',
    'shutdown_dgm_rd',
    'shutdown_dgm_wr',
    'shutdown_peer',
    'shutdown_stream_read_write',
    'shutdown_write_read',
    'socket_via_af_unix_read',
    'sock_exec_many',
    'socket_peer_rst',
    'socket_via_af_unix_write',
    'splice_nonblock',
    'stat_mode',
    'state_trans_client',
    'state_trans_server',
    'state_trans_udp',
    'tcp_server_crashes_timeout',
    'tcp_server_reboot',
    'tcp_udp_two_threads',
    'terminate_waitpid',
    'terminate_waitpid_prologue',
    'threaded_busy_socket',
    'threaded_listen',
    'threaded_nblock_conn',
    'threaded_udp',
    'threads_client',
    'threads_dgm',
    'threads_server',
    'threads_shutdown_diff_sock',
    'threads_shutdown_listening',
    'threads_shutdown_unblock',
    'threads_system',
    'two_accept_blocked',
    'udp_connect',
    'vfork_check_hang',
    'vfork_epilogue',
    'vfork_func_exec',
    'vfork_open_close_exec',
    'vfork_prologue',
    'vfork_sig_exec',
    'wildcard_server_passive_opening',
]

foreach test : tests
    test_exe = test
    test_c = test + '.c'
    package_tests_c += [ test_c ]
    executable(test_exe, test_c, install: true, install_dir: package_dir,
               dependencies: [test_deps, basic_test_deps])
endforeach

tests_info_xml = custom_target(package_dir.underscorify() + 'tests-info-xml',
                               install: true, install_dir: package_dir,
                               input: package_tests_c,
                               output: 'tests-info.xml', capture: true,
                               command: [ te_tests_info_sh,
                               meson.current_source_dir() ])

install_data([ 'package.dox', 'package.xml' ],
             install_dir: package_dir)

