# SPDX-License-Identifier: Apache-2.0
# (c) Copyright 2004 - 2022 Xilinx, Inc. All rights reserved.
include(builder.part.linux.platform)

TE_PLATFORM([], [], [-D_GNU_SOURCE], [-D_GNU_SOURCE], [],
            [logger_core tools logic_expr conf_oid rpcxdr rpc_types asn ndn \
             ipc bsapi loggerten rcfapi confapi comm_net_engine rcfunix \
             tapi rcfrpc tapi_rpc tapi_env tapi_tad log_proc trc \
             tapi_tcp_states tapi_bpf tapi_serial tapi_job tapi_tool])

TE_TOOLS([rgt trc tce])

TE_TOOL_PARMS([trc], [--with-popups --with-log-urls])

TE_LIB_PARMS([tapi_tad], [], [],
             [--without-snmp --without-atm --without-bridge --without-iscsi --without-cli])

TE_LIB_PARMS([rpcxdr], [], [],
             [--with-rpcdefs=${SOCKAPI_TS_LIBDIR}/talib_sockapi_ts/sapits.x.m4,${TE_BASE}/lib/rpcxdr/tarpc_serial.x.m4,${TE_BASE}/lib/rpcxdr/tarpc_job.x.m4])

. $TE_BASE/engine/builder/te_functions

#
# Build 32-bit versions of platform and ta_rpcprovider
#
if test "${TE_OOL_UL}" = "m32" ; then
        TE_AGENT_BUILD_PARMS=
        TE_AGENT_BUILD_CC=${TE_IUT_CC}
        TE_AGENT_BUILD_CFLAGS="${TE_IUT_CFLAGS} -m32"

        test -n "$TE_AGENT_BUILD_CC" && TE_AGENT_BUILD_CC="CC=$TE_AGENT_BUILD_CC"

        TE_PLATFORM([${TE_IUT_RPCS_I386_TYPE}], [$TE_AGENT_BUILD_CC],
                    [$TE_AGENT_BUILD_CFLAGS -D_GNU_SOURCE], [-D_GNU_SOURCE], [],
                    [logger_core tools loggerta rpctransport rpc_types rpcxdr \
                     agentlib rpcserver rpcs_serial talib_sockapi_ts])

        TE_LIB_PARMS([rpcxdr], [${TE_IUT_RPCS_I386_TYPE}], [],
                     [--with-rpcdefs=${SOCKAPI_TS_LIBDIR}/talib_sockapi_ts/sapits.x.m4,${TE_BASE}/lib/rpcxdr/tarpc_serial.x.m4,${TE_BASE}/lib/rpcxdr/tarpc_job.x.m4])
        TE_LIB_PARMS([talib_sockapi_ts], [${TE_IUT_RPCS_I386_TYPE}],
                     [${SOCKAPI_TS_LIBDIR}/talib_sockapi_ts], [], [])

        TE_TA_APP([ta_rpcs_32], [${TE_IUT_RPCS_I386_TYPE}], [${TE_IUT_TA_TYPE}], [ta_rpcprovider], [], [],
                  [talib_sockapi_ts rpcs_serial rpcserver agentlib rpcxdrta \
                   rpc_types rpctransport loggerta tools logger_core],
                  [\${EXT_SOURCES}/build.sh], [ta_rpcs_32], [TE_IUT_RPCS_I386_CFLAGS])
fi

#
# Build 64-bit versions of platform, agents, ta_rpcprovider, etc.
#
define([TE_AGENT_BUILD], [
    if test -n "${$1}" -o "${$1_BUILD}" = local ; then
        if ! te_is_in_list "${$1_TA_TYPE}" $TE_BS_PLATFORMS ; then
            case "${$1_TA_TYPE}" in
                *aarch64*) TE_TA_HOST=aarch64-pc-linux ;;
                *64*) TE_TA_HOST=x86_64-pc-linux ;;
                *) echo "Unsupported ${$1_TA_TYPE}" >&2 ; exit 1 ;;
            esac

            # Pre-checks for libbpf (XDP testing)
            if test -z "${TE_LIBBPF_SRC}" || test ${$1_HEADERS_NUM} -lt 310 ; then
                export BPF_CFG=""
            else
                export BPF_CFG="--with-bpf"
            fi

            TE_AGENT_BUILD_PARMS=
            TE_AGENT_BUILD_CC=${$1_CC}
            TE_AGENT_BUILD_CFLAGS="${$1_CFLAGS}"

            test -n "$TE_AGENT_BUILD_CC" && TE_AGENT_BUILD_CC="CC=$TE_AGENT_BUILD_CC"

            TE_PLATFORM([${$1_TA_TYPE}], [$TE_AGENT_BUILD_CC],
                        [$TE_AGENT_BUILD_CFLAGS -D_GNU_SOURCE],
                        [-D_GNU_SOURCE],
                        [],
                        [logger_core tools conf_oid rpcxdr rpc_types asn ndn \
                         comm_net_agent loggerta rpctransport agentlib rpcserver rcfpch tad \
                         talib_sockapi_ts netconf rpcs_serial ta_job rpcs_job])

            if test -n "$BPF_CFG" ; then
                TE_PLATFORM_EXT([libbpf], [${$1_TA_TYPE}], [${TE_LIBBPF_SRC}], [], [],
                                [export OBJDIR=\${PWD} && make -C \${EXT_SOURCES}/src],
                                [\${EXT_SOURCES}/src/bpf.h \${EXT_SOURCES}/src/libbpf_common.h \${EXT_SOURCES}/src/libbpf.h],
                                [libbpf.so], [], [], [bpf])
            fi

            TE_LIB_PARMS([tad], [${$1_TA_TYPE}], [],
                         [--with-pcap --with-eth --with-arp --with-ipstack \
                          --with-dhcp --with-forw --without-static-libc])

            TE_LIB_PARMS([rpcxdr], [${$1_TA_TYPE}], [],
                         [--with-rpcdefs=../talib_sockapi_ts/sapits.x.m4,tarpc_serial.x.m4,tarpc_job.x.m4])
            TE_LIB_PARMS([talib_sockapi_ts], [${$1_TA_TYPE}],
                         [${SOCKAPI_TS_LIBDIR}/talib_sockapi_ts], [], [])
            TE_LIB_PARMS([rcfpch], [${$1_TA_TYPE}], [], [--with-sniffers], [], [], [])

            TE_TA_TYPE([${$1_TA_TYPE}], [${$1_TA_TYPE}], [unix],
                       [--with-rcf-rpc --with-libnetconf --with-serialparse --with-sniffers=yes \
                        --with-aggr --with-sfptpd --with-ntpd \
                        --with-cfg-unix-daemons='dns ftp Xvfb smtp telnet rsh vncserver dhcp vtund' \
                        --without-static-libc --with-iptables $BPF_CFG --with-serial --with-pcre --with-tc \
                        --disable-networkmanager-check],
                       [], [], [], [comm_net_agent ndn asn])

            TE_TA_APP([ta_rpcprovider], [${$1_TA_TYPE}], [${$1_TA_TYPE}], [ta_rpcprovider], [], [],
                      [talib_sockapi_ts rpcs_serial ta_job rpcs_job rpcserver agentlib rpcxdrta \
                       rpc_types rpctransport loggerta tools logger_core],
                      [\${EXT_SOURCES}/build.sh --extra-deps='libpcre'],
                      [ta_rpcs], [])

            if test -n "$BPF_CFG" ; then
                TE_TA_APP([libbpf], [${$1_TA_TYPE}], [${$1_TA_TYPE}], [.], [], [], [],
                          [cp \${TE_PREFIX}/lib/libbpf.so \${TE_AGENTS_INST}/${$1_TA_TYPE}/])
            fi

            TE_TA_APP([init_test], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                      [${TE_TS_SOCKAPI}/lib/init_test], [], [], [],
                      [\${EXT_SOURCES}/build.sh],
                      [libinit_test.so])

            # By this macro the applications from gpl_tools directory
            # are built and deployed.
            # ol-ceph building is disabled. See gpl_tools/meson.build
            TE_TA_APP([gpl_tools], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                      [${SOCKAPI_TS_LIBDIR}/gpl_tools], [], [],
                      [logger_core tools],
                      [\${EXT_SOURCES}/build.sh],
                      [nfq_daemon/nfq_daemon \
                       apprtt/ol-apprtt \
                      ])

            TE_TA_APP([ta_core_watcher], [${$1_TA_TYPE}],
                      [${$1_TA_TYPE}], [], [], [], [], [],
                      [ta_core_watcher], [])

        fi
    fi
])

TE_AGENT_BUILD([TE_IUT])
TE_AGENT_BUILD([TE_TST1])
TE_AGENT_BUILD([TE_TST2])
TE_AGENT_BUILD([TE_HYPERVISOR])
TE_AGENT_BUILD([TE_LOG_LISTENER])
