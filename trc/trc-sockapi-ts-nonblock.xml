<?xml version="1.0" encoding="UTF-8"?>
<!-- SPDX-License-Identifier: Apache-2.0 -->
<!-- (c) Copyright 2025 Oktet, Inc. All rights reserved. -->
<test name="nonblock" type="package">
  <objective>IOCTL Requests</objective>
  <notes/>
  <iter result="PASSED">
    <notes/>
    <test name="nonblock" type="script">
      <objective>Check that nonblocking state request affects the behaviour of receive functions.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_zc() is not supported for not accelerated socket">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_zc() is not supported for not accelerated socket">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is not supported for not accelerated socket">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is not supported for not accelerated socket">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=1&amp;reuse_stack|ool_loop&gt;1)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=1&amp;reuse_stack|ool_loop&gt;1)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5" notes="onload_zc_hlrx_recv_zc() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5" notes="onload_zc_hlrx_recv_zc() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Checking before nonblocking state is enabled: tested function unexpectedly failed with error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">read</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">readv</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="sock_type"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
    </test>
    <test name="thread_unblock_recv" type="script">
      <objective>Try to set nonblock state from thread when recv() operation is blocked in another thread.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="sock_type"/>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5" key="ON-1901">
          <result value="PASSED"/>
          <result value="PASSED">
            <verdict>Child thread was blocked in recv() call</verdict>
            <verdict>Child thread was not unblocked even after data transmission from tester</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="v5" key="ON-1901">
          <result value="PASSED"/>
          <result value="PASSED">
            <verdict>Child thread was blocked in recv() call</verdict>
            <verdict>Child thread was not unblocked even after data transmission from tester</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="thread_unblock_send" type="script">
      <objective>Try to set nonblock state from thread when send() operation is blocked in another thread.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
    </test>
    <test name="thread_unblock_connect" type="script">
      <objective>Try to set nonblock state from thread when connect() operation is blocked in another thread.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast,if:'iut_if',addr:'alien_hwaddr':ether:alien},{{'pco_tst':tester},addr:'tst_addr':inet:unicast,if:'tst_if'}}</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
    </test>
    <test name="thread_unblock_accept" type="script">
      <objective>Try to set nonblock state from thread when accept() operation is blocked in another thread.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast,if:'iut_if',addr:'alien_hwaddr':ether:alien},{{'pco_tst':tester},addr:'tst_addr':inet:unicast,if:'tst_if'}}</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
    </test>
    <test name="accept" type="script">
      <objective>Check that request to set nonblock state affects accept() and accept4() functions called on SOCK_STREAM socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="func_flag"/>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
      </iter>
    </test>
    <test name="connect" type="script">
      <objective>Check that request to set nonblock state affects on connect() function called on SOCK_STREAM socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="gw_exists">FALSE</arg>
        <arg name="bind_iut">TRUE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="gw_exists">FALSE</arg>
        <arg name="bind_iut">FALSE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="gw_exists">FALSE</arg>
        <arg name="bind_iut">TRUE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="gw_exists">FALSE</arg>
        <arg name="bind_iut">FALSE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="gw_exists">FALSE</arg>
        <arg name="bind_iut">TRUE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="gw_exists">FALSE</arg>
        <arg name="bind_iut">FALSE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{'iut_host'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast,if:'iut_if'},'gw'{{'pco_gw':tester},addr:'gw_iut_addr':inet:unicast}},{'gw'{addr:'gw_tst_addr':inet:unicast,addr:'alien_link_addr':ether:alien},'tst_host'{{'pco_tst':tester},addr:'tst_addr':inet:unicast,if:'tst_if'}}</arg>
        <arg name="gw_exists">TRUE</arg>
        <arg name="bind_iut">FALSE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{'iut_host'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast,if:'iut_if'},'gw'{{'pco_gw':tester},addr:'gw_iut_addr':inet:unicast}},{'gw'{addr:'gw_tst_addr':inet:unicast,addr:'alien_link_addr':ether:alien},'tst_host'{{'pco_tst':tester},addr:'tst_addr':inet:unicast,if:'tst_if'}}</arg>
        <arg name="gw_exists">TRUE</arg>
        <arg name="bind_iut">TRUE</arg>
        <arg name="use_libc"/>
        <arg name="nonblock_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() called the second time on the socket with nonblock state set returned 0</verdict>
          </result>
        </results>
      </iter>
    </test>
  </iter>
</test>
