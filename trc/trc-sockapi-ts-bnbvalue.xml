<?xml version="1.0" encoding="UTF-8"?>
<!-- SPDX-License-Identifier: Apache-2.0 -->
<!-- (c) Copyright 2004 - 2022 Xilinx, Inc. All rights reserved. -->
<test name="bnbvalue" type="package">
  <objective>Bad and boundary values</objective>
  <iter result="PASSED">
    <notes/>
    <test name="descr_nonexist" type="script">
      <objective>Check that Socket API correctly handles situation with passing bad socket descriptors - descriptor that is not associated with any device.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_hlrx_recv_zc</arg>
        <notes/>
        <results tags="v5" notes="EBADF is expected, however onload_zc_hlrx_alloc() fails before we can call onload_zc_hlrx_recv_zc()">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error TA_UNIX-EBADF (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_hlrx_recv_copy</arg>
        <notes/>
        <results tags="v5" notes="EBADF is expected, however onload_zc_hlrx_alloc() fails before we can call onload_zc_hlrx_recv_copy()">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error TA_UNIX-EBADF (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">accept</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">bind</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">close</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">connect</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">getpeername</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">getsockname</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">getsockopt</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">ioctl</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">listen</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">pselect</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">read</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">read_via_splice</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">readv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_zc_send_sock</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_zc_send_sock_user_buf</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_zc_recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg_alt</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">select</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmmsg_alt</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">setsockopt</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">shutdown</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">write</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">write_via_splice</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">writev</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">od_send</arg>
        <notes/>
      </iter>
    </test>
    <test name="descr_inapprop" type="script">
      <objective>Check that Socket API correctly handles situation with passing descriptor for which some socket operations cannot be applied, for example it might be an ordinary file descriptor.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_msg_template_alloc</arg>
        <notes/>
        <results tags="v5" key="ON-4050">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error RPC-ESOCKTNOSUPPORT instead of RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmmsg_alt</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error RPC-ENOSYS instead of RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_hlrx_recv_zc</arg>
        <notes/>
        <results tags="v5" notes="ENOTSOCK is expected, however onload_zc_hlrx_alloc() fails before we can call onload_zc_hlrx_recv_zc()">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed') instead of RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_hlrx_recv_copy</arg>
        <notes/>
        <results tags="v5" notes="ENOTSOCK is expected, however onload_zc_hlrx_alloc() fails before we can call onload_zc_hlrx_recv_copy()">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed') instead of RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_zc_recv</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1831">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error RPC-ESOCKTNOSUPPORT instead of RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_zc_send_sock</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1831">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error RPC-ESOCKTNOSUPPORT instead of RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">simple_zc_send_sock_user_buf</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1831">
          <result value="FAILED">
            <verdict>Tested function failed with unexpected error RPC-ESOCKTNOSUPPORT instead of RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">ioctl</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>ioctl(SIOCATMARK) for not socket file descriptor failed with errno ENOTTY</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">accept</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">bind</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">connect</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">getpeername</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">getsockname</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">getsockopt</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">listen</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg_alt</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">setsockopt</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">shutdown</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">od_send</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_socket" type="script">
      <objective>Check that socket() function correctly handles values of domain, type and protocol parameters and sets errno variable in appropriate way.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;86" key="ST-2100">
          <result value="FAILED">
            <verdict>socket(PF_INET6, SOCK_STREAM, PROTO_UNKNOWN) returns -1, but: errno is set to EPROTONOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;86" key="ST-2100">
          <result value="FAILED">
            <verdict>socket(PF_INET6, SOCK_DGRAM, PROTO_UNKNOWN) returns -1, but: errno is set to EPROTONOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_UNKNOWN</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>socket(PF_INET6, SOCK_UNKNOWN, 0) returns -1, but: errno is set to EINVAL instead of EPROTOTYPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_RAW</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>socket(PF_INET6, SOCK_RAW, 0) returns -1, but: errno is set to EPROTONOSUPPORT instead of EPROTOTYPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;86" key="ST-2100">
          <result value="FAILED">
            <verdict>socket(PF_INET, SOCK_STREAM, PROTO_UNKNOWN) returns -1, but: errno is set to EPROTONOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;86" key="ST-2100">
          <result value="FAILED">
            <verdict>socket(PF_INET, SOCK_DGRAM, PROTO_UNKNOWN) returns -1, but: errno is set to EPROTONOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_UNKNOWN</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>socket(PF_INET, SOCK_UNKNOWN, 0) returns -1, but: errno is set to EINVAL instead of EPROTOTYPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="proto"/>
        <arg name="sock_type">SOCK_RAW</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>socket(PF_INET, SOCK_RAW, 0) returns -1, but: errno is set to EPROTONOSUPPORT instead of EPROTOTYPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno">EPROTONOSUPPORT</arg>
        <arg name="proto"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_UNKNOWN</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="proto"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_socket_pipe_too_many" type="script">
      <objective>Check that the system has a limitation on the number of opened sockets or pipes in the same process.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">65536</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="retry">close</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry"/>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
        <results tags="v5&amp;socket_cache" key="ON-4400">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been dropped with errno EMFILE</verdict>
          </result>
        </results>
        <results tags="!v5|v5&amp;!socket_cache" key="ON-4251">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been broken, but accept() passes.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">2048</arg>
        <arg name="ef_no_fail"/>
        <arg name="env"/>
        <arg name="retry">close</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry">90</arg>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
        <results tags="v5" key="ON-4251">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been dropped with errno EMFILE</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been broken, but accept() passes.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">2048</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="retry">close</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry">0</arg>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
        <results tags="v5" key="ON-4251">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been broken, but accept() passes.</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been broken, but accept() passes.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">2048</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="retry">close</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry">0</arg>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been broken, but accept() passes.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">65536</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="retry">close</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry"/>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
        <results tags="v5&amp;socket_cache" key="ON-4400">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been dropped with errno EMFILE</verdict>
          </result>
        </results>
        <results tags="!v5|v5&amp;!socket_cache" key="ON-4251">
          <result value="PASSED">
            <verdict>Wrong socket tst state, got STATE_SHUT_RD; expected STATE_CONNECTED</verdict>
            <verdict>Connection have been broken, but accept() passes.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">2048</arg>
        <arg name="ef_no_fail"/>
        <arg name="env"/>
        <arg name="retry">-</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry">90</arg>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
        <results tags="v5" key="ON-4251">
          <result value="FAILED">
            <verdict>Wrong socket state, got STATE_BOUND; expected STATE_CONNECTED</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">2048</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="retry">-</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry">0</arg>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">2048</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="retry">-</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry">0</arg>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">65536</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="retry">-</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry"/>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end">65536</arg>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="retry">-</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry"/>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end"/>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="retry">rlim</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry"/>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end"/>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="retry">rlim</arg>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry"/>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="ef_max_end"/>
        <arg name="ef_no_fail"/>
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="retry"/>
        <arg name="rlim_nofiles"/>
        <arg name="sleep_before_retry"/>
        <arg name="sock_type"/>
        <arg name="use_accept"/>
        <arg name="use_pipe"/>
        <notes/>
      </iter>
    </test>
    <test name="many_sock_on_server" type="script">
      <objective>Check that when we have created the largest number of sockets and after that close() one socket we can call function accept().</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="close_one">TRUE</arg>
        <arg name="env"/>
        <notes/>
        <results tags="v5&amp;(scalable_passive|scalable_active|socket_cache)&amp;socket_cache" key="ON-4400">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_one">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="addr_len_inapprop_sendto" type="script">
      <objective>The test deals with sendto() function. It checks that Socket API functions take into account the value passed in address_len parameter, and report an appropriate error if it is incorrect.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(reuse_stack&amp;ool_loop=1|ool_loop&gt;1)" key="ON-881">
          <result value="FAILED">
            <verdict>sendto() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(reuse_stack&amp;ool_loop=1|ool_loop&gt;1)" key="ON-881">
          <result value="FAILED">
            <verdict>sendto() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>sendto() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>sendto() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>sendto() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>sendto() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;udp_connect_no_handover" key="ON-881">
          <result value="FAILED">
            <verdict>sendto() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect">TRUE</arg>
        <arg name="env"/>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect">FALSE</arg>
        <arg name="env"/>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendto() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="addr_len_inapprop_sendmsg" type="script">
      <objective>The test deals with sendmsg(), sendmmsg() or onload_zc_send() function. It checks that Socket API functions take into account the value passed in address_len parameter, and report an appropriate error if it is incorrect.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() called with big 'len_val' parameter failed with errno RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with small 'len_val' parameter returned -1: errno is set to ESOCKTNOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with small 'len_val' parameter returned -1: errno is set to ESOCKTNOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() called with small 'len_val' parameter returned -1: errno is set to ESOCKTNOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))" notes="onload_zc_send() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() called with small 'len_val' parameter returned -1: errno is set to ESOCKTNOSUPPORT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>onload_zc_send() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>onload_zc_send() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>onload_zc_send() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>onload_zc_send() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5" notes="Onload does not support sendmmsg() on TCP">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack))">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="libc&lt;=13|(v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack)))">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="libc&lt;=13|(v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack)))">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="libc&lt;=13|(v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack)))">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="libc&lt;=13|(v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack)))">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload does not support sendmmsg with TCP">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload does not support sendmmsg with TCP">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload does not support sendmmsg with TCP">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmsg() called with small 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6=32&amp;el" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
        <results tags="udp_connect_no_handover" key="ON-11154">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called with small 'len_val' parameter returned -1: errno is set to ENOSYS instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=2|linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>sendmsg() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=2|linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>sendmsg() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-3478">
          <result value="FAILED">
            <verdict>sendmsg() called with big 'len_val' parameter failed with errno RPC-EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">onload_zc_send</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func"/>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">connect</arg>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func"/>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func"/>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func"/>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func"/>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func"/>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func"/>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func"/>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func"/>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func"/>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func"/>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func"/>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="conn_func">notconn</arg>
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="func"/>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="addr_len_accept" type="script">
      <objective>Check that accept() and accept4() functions allow to pass arbitrary address length and process it correctly</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">0</arg>
	<arg name="func">accept</arg>
	<arg name="func_flag">none</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was zero</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">exact</arg>
	<arg name="func">accept</arg>
	<arg name="func_flag">none</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">long</arg>
	<arg name="func">accept</arg>
	<arg name="func_flag">none</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">short</arg>
	<arg name="func">accept</arg>
	<arg name="func_flag">none</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">0</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">none</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept4() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was zero</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">exact</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">none</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">long</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">none</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">short</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">none</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept4() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">0</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">nonblock</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept4() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was zero</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">exact</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">nonblock</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">long</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">nonblock</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">short</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">nonblock</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept4() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">0</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">cloexec</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept4() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was zero</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">exact</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">cloexec</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">long</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">cloexec</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="addr_buf_size">short</arg>
	<arg name="func">accept4</arg>
	<arg name="func_flag">cloexec</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept4() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="addr_len_getname" type="script">
      <objective>Check that getsockname() and getpeername() functions allow to pass an arbitrary value in address_len parameter: - In case the buffer is shorter than an appropriate sockaddr structure it fills in only the number of bytes specified; - In case the buffer is longer it fills in no more than the size of address structure of a particular domain. .</objective>
      <notes>The test fails on Linux as well. The function updates shorter length to required. It's a bit confusing, but may be OK (POSIX?).</notes>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 28 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getpeername() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">short</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">0</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">getsockname</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockname() successfully completes, but updates 'address_len' field to 16 although the length passed to the function was shorter</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addr_buf_size">long</arg>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="addr_len_inapprop_recv_short" type="script">
      <objective>Check that receiving functions allow to pass address length value that is less than actual size of address structure.</objective>
      <notes>Linux recvfrom()/recvmsg()/recvmmsg() can increase size of buffer for peer address when short buffer is provided.</notes>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <arg name="null_buf"/>
        <arg name="zero">FALSE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>recvmmsg() increased size of buffer for peer address</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="zero">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="zero">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="zero"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="zero"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="zero"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="null_buf"/>
        <arg name="zero"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="null_buf"/>
        <arg name="zero"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf"/>
        <arg name="zero">FALSE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>recvmsg() increased size of buffer for peer address</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <arg name="null_buf"/>
        <arg name="zero">TRUE</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <arg name="null_buf"/>
        <arg name="zero">FALSE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>recvfrom() increased size of buffer for peer address</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="addr_len_inapprop_recvfrom_long" type="script">
      <objective>Check that recvfrom() functions allows to pass address_len parameter with value that is bigger than actual size of address structure.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvfrom() returns success and modifies to 0 peer address length value</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
    </test>
    <test name="addr_len_inapprop_recvmsg_long" type="script">
      <objective>Check that recvmsg()-like functions allow to pass msg_namelen with value that is greater than actual size of address structure.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=1&amp;reuse_stack|ool_loop&gt;1)" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=1&amp;reuse_stack|ool_loop&gt;1)" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=1&amp;reuse_stack|ool_loop&gt;1)" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=1&amp;reuse_stack|ool_loop&gt;1)" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Source address is not provided for TCP, like in other receive functions on Linux">
          <result value="FAILED">
            <verdict>onload_zc_recv() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_recv() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Source address is not provided for TCP, like in other receive functions on Linux">
          <result value="FAILED">
            <verdict>onload_zc_recv() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_recv() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() fails with RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() fails with RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload-specific function is not supported for not-accelerated socket">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_recv() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_recv() fails with RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_recv</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_copy() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-12411">
          <result value="FAILED">
            <verdict>onload_zc_hlrx_recv_zc() returns success, and does not update msg_namelen field of msghdr structure</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Source address is not provided for TCP, like in other receive functions on Linux">
          <result value="FAILED">
            <verdict>onload_zc_recv() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Source address is not provided for TCP, like in other receive functions on Linux">
          <result value="FAILED">
            <verdict>onload_zc_recv() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() fails with RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() fails with RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="len_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="Linux and SunOS do not provide peer address to recvfrom() on stream (TCP) socket">
          <result value="FAILED">
            <verdict>recvmsg() returns success and modifies msg_namelen field of msghdr structure to 0</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_accept_addr_null" type="script">
      <objective>Check that accept() function correctly handles situation with passing NULL pointer as the value of address and address_len parameters.</objective>
      <notes>Linux does provide correct error report when NULL address and not-NULL pointer with sufficient address length is passed to accept().</notes>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_wildcard"/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>accept(..., NULL, != NULL) waits for connection</verdict>
            <verdict>accept() called with NULL pointer passing as the address parameter returned success instead of expected failure with EFAULT errno</verdict>
            <verdict>accept(..., != NULL, NULL) waits for connection</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_send_addr_null_stream_not_conn" type="script">
      <objective>Check that sendto()-like function correctly reports an error when it is called on not connected SOCK_STREAM socket with address parameter equals to NULL.</objective>
      <notes>Linux sets errno to EPIPE instead of ENOTCONN when send operation is called on not connected stream socket.</notes>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendto() with NULL destination address and 0 address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmsg() with NULL destination address and 0 address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on not connected SOCK_STREAM sockets returned -1: errno is set to ENOSYS instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="linux&amp;v5">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and 0 address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="linux&amp;v5">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and 0 address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendto() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux-2.6&lt;50|!v5">
          <result value="FAILED">
            <verdict>sendmsg() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EFAULT instead of ENOTCONN</verdict>
          </result>
        </results>
        <results tags="linux-2.6&gt;=50&amp;v5">
          <result value="FAILED">
            <verdict>sendmsg() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux-2.6&lt;=32">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EFAULT instead of ENOTCONN</verdict>
          </result>
        </results>
        <results tags="linux-3&gt;=0">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to ENOSYS instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="linux&amp;v5">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="linux&amp;v5">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and non-zero address length called on not connected SOCK_STREAM sockets returned -1: errno is set to EPIPE instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_send_addr_null_stream_conn" type="script">
      <objective>Check that sendto()-like function ignores address and address_len parameters when it is called on connected SOCK_STREAM socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_send_user_buf() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with TA_UNIX-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_send_user_buf() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with TA_UNIX-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_send() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_send() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)|!(ool_loop=0|ool_loop=1&amp;!reuse_stack)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)|!(ool_loop=0|ool_loop=1&amp;!reuse_stack)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_send_user_buf() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with TA_UNIX-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_send_user_buf() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with TA_UNIX-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|onload_loop=1&amp;!reuse_stack)" notes="onload_zc_send() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|onload_loop=1&amp;!reuse_stack)" notes="onload_zc_send() is supported only on accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)|!(ool_loop=0|ool_loop=1&amp;!reuse_stack)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)|!(ool_loop=0|ool_loop=1&amp;!reuse_stack)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed') errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">TRUE</arg>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux-2.6&lt;=32">
          <result value="FAILED">
            <verdict>sendmsg() with NULL destination address and non-zero address length called on connected SOCK_STREAM sockets returned -1 with RPC-EFAULT errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() with NULL destination address and 0 address length called on connected SOCK_STREAM sockets returned -1 with RPC-ENOSYS errno instead of number of sent bytes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen">FALSE</arg>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="addrlen"/>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_sendto_addr_null_dgram" type="script">
      <objective>Check that sendto() function correctly handles situation with passing NULL pointer as an address structure with SOCK_DGRAM sockets.</objective>
      <notes>Linux 2.4.20 and earlier sets errno to ENOTCONN instead of EDESTADDRREQ when sendto/sendmsg operation is called on not connected datagram socket.</notes>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_sendmsg_addr_null_dgram" type="script">
      <objective>Check that sendmsg() or sendmmsg() functions correctly handle situation with passing NULL pointer as an address structure with not connected SOCK_DGRAM sockets.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux" notes="Linux sets errno to EFAULT instead of EDESTADDRREQ when sendto/sendmsg operation is called on not connected datagram socket.">
          <result value="FAILED">
            <verdict>sendmsg() called on not connected SOCK_DGRAM sockets with msg_namelen != 0 returned -1: errno is set to EFAULT instead of EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux" notes="Linux sets errno to EFAULT instead of EDESTADDRREQ when sendto/sendmsg/sendmmsg operation is called on not connected datagram socket.">
          <result value="FAILED">
            <verdict>sendmmsg() called on not connected SOCK_DGRAM sockets with msg_namelen != 0 returned -1: errno is set to EFAULT instead of EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_bind_addr_null" type="script">
      <objective>Check that bind() function correctly handles situation with passing NULL pointer as the value of address parameter.</objective>
      <notes>Linux has incorrect error reporting (EINVAL/EFAULT) instead of EDESTADDRREQ when bind() is call with NULL address pointer and zero/non-zero address length.</notes>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="sock_type"/>
        <results tags="linux">
          <result value="FAILED"/>
        </results>
      </iter>
    </test>
    <test name="func_connect_addr_null" type="script">
      <objective>Check that connect() function correctly handles situation with passing NULL as the value of address parameter.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_getname_addr_null_stream" type="script">
      <objective>Check that getpeername() and getsockname() functions correctly handle situation with passing NULL pointer as the value of address or address_len parameters.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getpeername() called on not connected stream socket with NULL as the value of address parameter and positive address length failed with errno ENOTCONN</verdict>
            <verdict>getpeername() called on not connected stream socket with not NULL as the value of address parameter and NULL address length location failed with errno ENOTCONN</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_getname_addr_null_dgram" type="script">
      <objective>Check that getpeername() and getsockname() functions correctly handle situation with passing NULL as the value of address or address_len parameters.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getpeername() called on not connected datagram socket with NULL as the value of address parameter and positive address length failed with errno ENOTCONN</verdict>
            <verdict>getpeername() called on not connected datagram socket with not NULL as the value of address parameter and NULL address length location failed with errno ENOTCONN</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_recvfrom_addr_null_stream" type="script">
      <objective>Check that recvfrom() function correctly handles situation with passing NULL as the value of address or address_len parameters.</objective>
      <notes>Linux returns EFAULT when recvfrom() is called on connected stream socket with not-NULL address buffer pointer and NULL address buffer length pointer. Linux usually ignores such parameters for stream sockets.</notes>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
        <results tags="linux" notes="Linux returns EFAULT when recvfrom() is called on connected stream socket with not-NULL address buffer pointer and NULL address buffer length pointer. Linux usually ignores such parameters for stream sockets.">
          <result value="FAILED"/>
        </results>
      </iter>
    </test>
    <test name="func_recvfrom_addr_null_dgram" type="script">
      <objective>Check that recvfrom() function correctly handles situation with passing NULL as the value of address or address_len parameters.</objective>
      <notes>FreeBSD5 stack does nothing with 'from' and return received datagram.</notes>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="incorrect_family" type="script">
      <objective>Check that  sendmsg(), sendmmsg() and  sendto() functions correctly process incorrect family in passed address</objective>
      <notes>Some versions of Linux (2.4.x, 2.6.9) return EINVAL instead of EAFNOSUPPORT when user tries to send to address with inappropriate family.</notes>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called on 'iut_s' socket with incorrect domain family, returns -1, but: errno is set to ENOSYS instead of EAFNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendto</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendto</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendto</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Sending from AF_INET6 socket to AF_INET address was successful</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called on 'iut_s' socket with incorrect domain family, returns -1, but: errno is set to ENOSYS instead of EAFNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() called on 'iut_s' socket with incorrect domain family, returns -1, but: errno is set to EOPNOTSUPP instead of EAFNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="net_addr"/>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() called on 'iut_s' socket with incorrect domain family, returns -1, but: errno is set to EOPNOTSUPP instead of EAFNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendto</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmsg</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendto</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendto</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="net_addr"/>
        <notes/>
      </iter>
    </test>
    <test name="func_connect_inapprop_addr" type="script">
      <objective>Check that connect() reports an error when it is used with peer address that contains wildcard network address or zero port with connection-oriented sockets.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="port_wildcard"/>
        <arg name="addr_wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="addr_family_inapprop_bind" type="script">
      <objective>Check that bind() function checks address family field of address parameter and reports an error when it contains not supported by protocol family socket created with.</objective>
      <notes>Linux ignores family of the address to bind to.</notes>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="family_unknown"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)&amp;!linux-3&amp;!v5">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="family_unknown"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux)&amp;!linux-3&amp;!v5">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="family_unknown"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-3">
          <result value="PASSED"/>
        </results>
        <results tags="(linux)&amp;!linux-3">
          <result value="FAILED"/>
        </results>
      </iter>
    </test>
    <test name="addr_family_inapprop_connect" type="script">
      <objective>Check that connect() function checks address family field of address parameter and reports an error when it contains not supported by protocol family socket created with.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_bind_twice" type="script">
      <objective>Check that bind() forbids binding more than once.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="port1">unspecified</arg>
        <arg name="port2">other</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-6873">
          <result value="FAILED">
            <verdict>bind() called twice on the same socket on IUT returns 0 istead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="port1">unspecified</arg>
        <arg name="port2">other</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="port1">unspecified</arg>
        <arg name="port2">unspecified</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="port1">unspecified</arg>
        <arg name="port2">same</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="port1">specified</arg>
        <arg name="port2"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_bind_after_listen" type="script">
      <objective>Check that bind() reports an appropriate error when it is called after listen()</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_bind_after_accept" type="script">
      <objective>Check that bind() reports an appropriate error when it is called after accept().</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_bind_after_connect" type="script">
      <objective>Check that bind() reports an appropriate error when it is called after connect().</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_bind_notassigned_addr" type="script">
      <objective>Check that bind() rejects bindings to network addresses not assigned to the system.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_bind_after_implicit_bind_udp" type="script">
      <objective>Check that bind() reports an appropriate error when it is called after connect()/sendto().</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <notes/>
      </iter>
    </test>
    <test name="func_listen_dgram" type="script">
      <objective>Check that listen() function reports an appropriate error when it is used with connectionless sockets.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast_ipv6</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_listen_after_connect" type="script">
      <objective>Check that listen() function reports an appropriate error when it is used after connect()</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_listen_twice" type="script">
      <objective>Check that listen() function allows to be called more than once on the same socket.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_accept_dgram" type="script">
      <objective>Check that accept() function reports an appropriate error when it is used with connectionless sockets.</objective>
      <iter result="PASSED">
        <arg name="env"/>
	<arg name="func"/>
	<arg name="func_flag"/>
        <notes/>
      </iter>
    </test>
    <test name="func_accept_stream_client" type="script">
      <objective>Check that accept() function reports an error when it is used with client socket of type SOCK_STREAM.</objective>
      <iter result="PASSED">
        <arg name="env"/>
	<arg name="func"/>
	<arg name="func_flag"/>
        <notes/>
      </iter>
    </test>
    <test name="func_connect_twice" type="script">
      <objective>Check that connect() function reports an error when it is called more than once on the same socket.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_connect_after_listen" type="script">
      <objective>Check that connect() function reports an error when it is used after listen() function.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="with_bind">TRUE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() called on IUT returns -1: errno is set to EISCONN instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast_ipv6</arg>
        <arg name="with_bind">TRUE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() called on IUT returns -1: errno is set to EISCONN instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="with_bind">FALSE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() called on IUT returns -1: errno is set to EISCONN instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast_ipv6</arg>
        <arg name="with_bind">FALSE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() called on IUT returns -1: errno is set to EISCONN instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_connect_str_unspec_af" type="script">
      <objective>Check that connect() function reports an error when it is used after listen() function with connection-oriented sockets even if sa_family field of sockaddr structure equals to AF_UNSPEC.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="with_bind"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() call unexpectedly successful</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_getname" type="script">
      <objective>Check that getsockname() and getpeername() functions correctly work when they are called for not bound/connected sockets.</objective>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_sockopt_level_name" type="script">
      <objective>Check that getsockopt() and setsockopt() functions correctly handle passing unknown level parameter and unsupported option name;</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">getsockopt</arg>
        <arg name="level">SOL_TCP</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt(SOL_TCP, SOCKOPT_UNKNOWN) returns -1, but: errno is set to EOPNOTSUPP instead of ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">setsockopt</arg>
        <arg name="level">SOL_IPV6</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">setsockopt</arg>
        <arg name="level">SOL_UDP</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">getsockopt</arg>
        <arg name="level">SOL_UDP</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt(SOL_UDP, SOCKOPT_UNKNOWN) returns -1, but: errno is set to EOPNOTSUPP instead of ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">getsockopt</arg>
        <arg name="level">SOL_IPV6</arg>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, SOCKOPT_UNKNOWN) returns -1, but: errno is set to EOPNOTSUPP instead of ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">getsockopt</arg>
        <arg name="level">SOL_TCP</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">getsockopt</arg>
        <arg name="level">SOL_UDP</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">setsockopt</arg>
        <arg name="level">SOL_IPV6</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">setsockopt</arg>
        <arg name="level">SOL_TCP</arg>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func">getsockopt</arg>
        <arg name="level">SOL_IPV6</arg>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func"/>
        <arg name="level">SOL_UDP</arg>
        <arg name="opt_name"/>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func"/>
        <arg name="level">SOL_TCP</arg>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func"/>
        <arg name="level">SOL_SOCKET</arg>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="func"/>
        <arg name="level">SOL_IP</arg>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="func">getsockopt</arg>
        <arg name="level"/>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt(SOL_UNKNOWN, SO_TYPE) returns -1, but: errno is set to ENOPROTOOPT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="func">setsockopt</arg>
        <arg name="level"/>
        <arg name="opt_name"/>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt(SOL_UNKNOWN, SO_TYPE) returns -1, but: errno is set to ENOPROTOOPT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="func">setsockopt</arg>
        <arg name="level"/>
        <arg name="opt_name"/>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt(SOL_UNKNOWN, SO_TYPE) returns -1, but: errno is set to ENOPROTOOPT instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno">EINVAL</arg>
        <arg name="func">getsockopt</arg>
        <arg name="level"/>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt(SOL_UNKNOWN, SO_TYPE) returns -1, but: errno is set to EOPNOTSUPP instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_setsockopt" type="script">
      <objective>Check the behaviour of setsockopt() function with different combinations of option_value and option_length parameters</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IPV6 optname IPV6_RECVPKTINFO and optlen 1 returns 0 instead of -1</verdict>
          </result>
          <result value="FAILED">
            <verdict>IPV6_RECVPKTINFO option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IPV6 optname IPV6_MULTICAST_HOPS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IPV6 optname IPV6_UNICAST_HOPS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>IPV6_RECVPKTINFO option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IPV6 optname IPV6_MULTICAST_LOOP and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_V6ONLY</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IPV6 optname IPV6_V6ONLY and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_RECVHOPLIMIT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IPV6 optname IPV6_RECVHOPLIMIT and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_MULTICAST_HOPS option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_CHECKSUM</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>IPV6_CHECKSUM option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_UNICAST_HOPS option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_RECVPKTINFO option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_MULTICAST_LOOP option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;=26">
          <result value="FAILED">
            <verdict>IPV6_MULTICAST_HOPS option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_CHECKSUM</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_CHECKSUM option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_AUTHHDR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_AUTHHDR option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_ADDRFORM</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_ADDRFORM option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_V6ONLY</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_V6ONLY option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_HOPOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_HOPOPTS option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_RECVHOPLIMIT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_RECVHOPLIMIT option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_DSTOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_DSTOPTS option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_TOS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_MULTICAST_TTL and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_IF</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6&lt;=31">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_MULTICAST_IF and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_MTU_DISCOVER and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="(linux-2.6&gt;=31)&amp;!v5">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt(IP_TOS, (not nil), 1) returns -1, but: errno is set to EFAULT instead of EINVAL</verdict>
          </result>
        </results>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_TOS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_DONTFRAGMENT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>IP_DONTFRAGMENT option is unknown at level SOL_IP, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>IP_ROUTER_ALERT option is unknown at level SOL_IP, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_RETOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_RETOPTS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_RECVTTL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_RECVTTL and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_RECVTOS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_RECVTOS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_RECVOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_RECVOPTS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_RECVERR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_RECVERR and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_PKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_PKTINFO and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_OPTIONS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_OPTIONS and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-22">
          <result value="FAILED">
            <verdict>IP_OPTIONS option is unknown at level SOL_IP, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_LOOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_MULTICAST_LOOP and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_DROP_MEMBERSHIP</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;=24">
          <result value="FAILED">
            <verdict>setsockopt(IP_DROP_MEMBERSHIP, (not nil), 1) returns -1, but: errno is set to EPROTO instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_ADD_MEMBERSHIP</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;=24">
          <result value="FAILED">
            <verdict>setsockopt(IP_ADD_MEMBERSHIP, (not nil), 1) returns -1, but: errno is set to EPROTO instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_BINDTODEVICE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux-2.6&gt;=24">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_SOCKET optname SO_BINDTODEVICE and optlen 1 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt(TCP_CORK, (nil), 0) returns -1, but: errno is set to EINVAL instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="RA packet may be delivered ONLY to IPPROTO_RAW socket">
          <result value="FAILED">
            <verdict>setsockopt(IPV6_ROUTER_ALERT, (nil), 0) returns -1, but: errno is set to EINVAL instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">34</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt(IPV6_ROUTER_ALERT, (nil), 34) returns -1, but: errno is set to EINVAL instead of EFAULT</verdict>
          </result>
        </results>
        <results tags="linux-2.6&gt;=26">
          <result value="FAILED">
            <verdict>IPV6_ROUTER_ALERT option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux-2.6&lt;=24">
          <result value="FAILED">
            <verdict>setsockopt(IPV6_ROUTER_ALERT, (nil), 5) returns -1, but: errno is set to EINVAL instead of EFAULT</verdict>
          </result>
        </results>
        <results tags="linux-2.6&gt;=26">
          <result value="FAILED">
            <verdict>IPV6_ROUTER_ALERT option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_NEXTHOP option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_NEXTHOP option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_NEXTHOP option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_NEXTHOP option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>IPV6_ROUTER_ALERT option is unknown at level SOL_IPV6, setsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="ON-5391">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_TOS and optlen 0 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_TOS and optlen 0 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() with level SOL_IP optname IP_TOS and optlen 0 returns 0 instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">SO_REUSEPORT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt(SO_REUSEPORT, (nil), 0) returns -1, but: errno is set to EINVAL instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len">0</arg>
        <arg name="opt_name">SO_REUSEADDR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt(SO_REUSEADDR, (nil), 0) returns -1, but: errno is set to EINVAL instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">34</arg>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_IF</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_ADD_MEMBERSHIP</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_DROP_MEMBERSHIP</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_REUSEADDR</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">34</arg>
        <arg name="opt_name">SO_REUSEADDR</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_REUSEPORT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">34</arg>
        <arg name="opt_name">SO_REUSEPORT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">34</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len">34</arg>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_REUSEADDR</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_REUSEPORT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_DSTOPTS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_HOPOPTS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_ADDRFORM</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_ACCEPTCONN</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_CONDITIONAL_ACCEPT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_BROADCAST</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_DEBUG</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_DONTROUTE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_ERROR</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_KEEPALIVE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_LINGER</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_DONTLINGER</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_OOBINLINE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_RCVBUFFORCE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_RCVTIMEO</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_EXCLUSIVEADDRUSE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_SNDBUFFORCE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_SNDLOWAT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_SNDTIMEO</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_USELOOPBACK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_TIMESTAMP</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_TIMESTAMPNS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_NODELAY</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_QUICKACK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_USER_TIMEOUT</arg>
        <arg name="type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_getsockopt" type="script">
      <objective>Check the behaviour of getsockopt() function with different combinations of option_value and option_length parameters</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_USER_TIMEOUT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_USER_TIMEOUT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-2512">
          <result value="FAILED">
            <verdict>TCP_USER_TIMEOUT option is unknown at level SOL_TCP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_USER_TIMEOUT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_USER_TIMEOUT) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-2512">
          <result value="FAILED">
            <verdict>TCP_USER_TIMEOUT option is unknown at level SOL_TCP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_QUICKACK</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_QUICKACK) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_QUICKACK</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_QUICKACK) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_DEFER_ACCEPT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_DEFER_ACCEPT) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_KEEPCNT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_KEEPCNT) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_KEEPINTVL) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_KEEPINTVL) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_KEEPIDLE) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_KEEPIDLE) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_MAXSEG) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_MAXSEG) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">200</arg>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_CORK) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_CORK) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_NODELAY</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_NODELAY) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_NODELAY</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(TCP_NODELAY) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_UNICAST_HOPS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_UNICAST_HOPS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">200</arg>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_RECVPKTINFO) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_LOOP) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_LOOP) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_HOPS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_HOPS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_ADDRFORM</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_ADDRFORM) failed and returned -1, errno=ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_V6ONLY</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_V6ONLY) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_V6ONLY</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_V6ONLY) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_HOPOPTS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_HOPOPTS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_HOPOPTS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_HOPOPTS) has reduced opt_len and returned no error</verdict>
          </result>
          <result value="PASSED">
            <verdict>getsockopt(IPV6_HOPOPTS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVHOPLIMIT</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_RECVHOPLIMIT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_DSTOPTS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_DSTOPTS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_DSTOPTS</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_DSTOPTS) has reduced opt_len and returned no error</verdict>
          </result>
          <result value="PASSED">
            <verdict>getsockopt(IPV6_DSTOPTS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_UNICAST_HOPS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_UNICAST_HOPS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">200</arg>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_RECVPKTINFO) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>IPV6_RECVPKTINFO option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
          <result value="PASSED">
            <verdict>getsockopt(IPV6_RECVPKTINFO) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_MULTICAST_LOOP option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_LOOP) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_MULTICAST_LOOP option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_LOOP) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_MULTICAST_HOPS option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_HOPS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_MULTICAST_HOPS option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_MULTICAST_HOPS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_CHECKSUM</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_CHECKSUM option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_AUTHHDR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_AUTHHDR option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_ADDRFORM</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_ADDRFORM option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_ADDRFORM) failed and returned -1, errno=ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_V6ONLY</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_V6ONLY) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_V6ONLY</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_V6ONLY) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_ROUTER_ALERT option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IPV6_NEXTHOP option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_HOPOPTS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_HOPOPTS option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)" key="ON-5391">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_HOPOPTS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_HOPOPTS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_HOPOPTS option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)" key="OL 4842">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_HOPOPTS) has reduced opt_len and returned no error</verdict>
          </result>
          <result value="PASSED">
            <verdict>getsockopt(IPV6_HOPOPTS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVHOPLIMIT</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_RECVHOPLIMIT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVHOPLIMIT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>IPV6_RECVHOPLIMIT option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
          <result value="PASSED">
            <verdict>getsockopt(IPV6_RECVHOPLIMIT) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_DSTOPTS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_DSTOPTS option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_DSTOPTS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_DSTOPTS</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IPV6_DSTOPTS option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)" key="OL 4842">
          <result value="PASSED">
            <verdict>getsockopt(IPV6_DSTOPTS) has reduced opt_len and returned no error</verdict>
          </result>
          <result value="PASSED">
            <verdict>getsockopt(IPV6_DSTOPTS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_UNICAST_HOPS) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">200</arg>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_RECVPKTINFO) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_RECVPKTINFO) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_MULTICAST_LOOP) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_MULTICAST_HOPS) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_CHECKSUM</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_CHECKSUM) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_AUTHHDR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_AUTHHDR) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_ADDRFORM</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_ADDRFORM) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_V6ONLY</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_V6ONLY) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_ROUTER_ALERT) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_NEXTHOP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_NEXTHOP) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_HOPOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_HOPOPTS) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVHOPLIMIT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_RECVHOPLIMIT) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_DSTOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(SOL_IPV6, IPV6_DSTOPTS) failed and returned -1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_TTL) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_TTL) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_LOOP) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_LOOP) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_IF</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_IF) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_IF</arg>
        <arg name="type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_IF) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MTU_DISCOVER) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_MTU_DISCOVER) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">200</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_TTL) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_TTL) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">200</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_TOS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_TOS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_DONTFRAGMENT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IP_DONTFRAGMENT option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_ROUTER_ALERT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IP_ROUTER_ALERT option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RETOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RETOPTS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RETOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RETOPTS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVTTL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVTTL) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVTTL</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVTTL) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVTOS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVTOS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVTOS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVTOS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVOPTS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVOPTS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVOPTS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVERR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVERR) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_RECVERR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_RECVERR) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_PKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_PKTINFO) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_PKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_PKTINFO) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_OPTIONS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(IP_OPTIONS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-22">
          <result value="FAILED">
            <verdict>IP_OPTIONS option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IP_MULTICAST_TTL option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_TTL) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IP_MULTICAST_TTL option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_TTL) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IP_MULTICAST_LOOP option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_LOOP) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_LOOP</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IP_MULTICAST_LOOP option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_LOOP) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_IF</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IP_MULTICAST_IF option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_IF) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_MULTICAST_IF</arg>
        <arg name="type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>IP_MULTICAST_IF option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(IP_MULTICAST_IF) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_DROP_MEMBERSHIP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IP_DROP_MEMBERSHIP option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_ADD_MEMBERSHIP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>IP_ADD_MEMBERSHIP option is unknown at level SOL_IP, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TIMESTAMPING) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TIMESTAMPING) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TIMESTAMPNS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TIMESTAMPNS) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TIMESTAMPNS</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TIMESTAMPNS) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TIMESTAMP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TIMESTAMP) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TIMESTAMP</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TIMESTAMP) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_USELOOPBACK</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>SO_USELOOPBACK option is unknown at level SOL_SOCKET, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">200</arg>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TYPE) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_TYPE) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_SNDTIMEO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_SNDTIMEO) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_SNDTIMEO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_SNDTIMEO) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_SNDLOWAT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_SNDLOWAT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_SNDLOWAT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_SNDLOWAT) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_SNDBUF) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_SNDBUF) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_EXCLUSIVEADDRUSE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>SO_EXCLUSIVEADDRUSE option is unknown at level SOL_SOCKET, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_REUSEPORT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_REUSEPORT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_REUSEPORT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_REUSEPORT) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_REUSEADDR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_REUSEADDR) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_REUSEADDR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_REUSEADDR) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_RCVTIMEO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_RCVTIMEO) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_RCVTIMEO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_RCVTIMEO) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_RCVLOWAT) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_RCVLOWAT) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_RCVBUF) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_RCVBUF) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_PRIORITY) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_PRIORITY) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_OOBINLINE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_OOBINLINE) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_OOBINLINE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_OOBINLINE) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_DONTLINGER</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>SO_DONTLINGER option is unknown at level SOL_SOCKET, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_LINGER</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_LINGER) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_LINGER</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_LINGER) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_KEEPALIVE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_KEEPALIVE) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_KEEPALIVE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_KEEPALIVE) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_ERROR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_ERROR) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_ERROR</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_ERROR) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_DONTROUTE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_DONTROUTE) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-25">
          <result value="FAILED">
            <verdict>SO_DONTROUTE option is unknown at level SOL_SOCKET, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_DONTROUTE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_DONTROUTE) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-25">
          <result value="FAILED">
            <verdict>SO_DONTROUTE option is unknown at level SOL_SOCKET, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_DEBUG</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_DEBUG) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_DEBUG</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_DEBUG) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_BROADCAST</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_BROADCAST) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_BROADCAST</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_BROADCAST) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_BINDTODEVICE</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_BINDTODEVICE) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_CONDITIONAL_ACCEPT</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>SO_CONDITIONAL_ACCEPT option is unknown at level SOL_SOCKET, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">10</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_ACCEPTCONN</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_ACCEPTCONN) has reduced opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">1</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_ACCEPTCONN</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(SO_ACCEPTCONN) has not changed opt_len and returned no error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">(unused)</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer">FALSE</arg>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(IPV6_RECVPKTINFO) with NULL option value buffer and NULL length value buffer returns -1, but: errno is set to EOPNOTSUPP instead of EFAULT</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">0</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>IPV6_RECVPKTINFO option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">10</arg>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>IPV6_RECVPKTINFO option is unknown at level SOL_IPV6, getsockopt() failed, errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">(unused)</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer">TRUE</arg>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(IPV6_RECVPKTINFO) with non-NULL option value buffer and NULL length value buffer returns -1, but: errno is set to EOPNOTSUPP instead of EFAULT</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">0</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(IPV6_RECVPKTINFO) with zero option length value failed with errno EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">(unused)</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">(unused)</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">(unused)</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">(unused)</arg>
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">10</arg>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">10</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">10</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen"/>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val">10</arg>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">0</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">0</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">0</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">0</arg>
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name">TCP_CORK</arg>
        <arg name="type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buf_rlen">(unused)</arg>
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="len_buffer"/>
        <arg name="opt_buffer"/>
        <arg name="opt_len_val"/>
        <arg name="opt_name"/>
        <arg name="type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_sockopt_boolean" type="script">
      <objective>Check that any boolean socket option can be processed correctly when a variable different integer type is used for passing option value.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>setsockopts(-1) return EINVAL</verdict>
            <verdict>setsockopts(256) return EINVAL</verdict>
            <verdict>setsockopts(64K-1) return EINVAL</verdict>
            <verdict>setsockopts(64K) return EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(IPV6_MULTICAST_LOOP) for SOCK_DGRAM socket failed with errno EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_LOOP</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>getsockopt(IPV6_MULTICAST_LOOP) for SOCK_STREAM socket failed with errno EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_LOOP</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_LOOP</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(IP_MULTICAST_LOOP) for SOCK_STREAM socket failed with errno ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_DONTROUTE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux)&amp;v5" key="ON-25" notes="SO_DONTROUTE is not supported in V5.">
          <result value="FAILED">
            <verdict>getsockopt(SO_DONTROUTE) for SOCK_DGRAM socket failed with errno ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_DONTROUTE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)&amp;v5" key="ON-25" notes="SO_DONTROUTE is not supported in V5.">
          <result value="FAILED">
            <verdict>getsockopt(SO_DONTROUTE) for SOCK_STREAM socket failed with errno ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_BROADCAST</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_DEBUG</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_REUSEADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_REUSEPORT</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_KEEPALIVE</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_OOBINLINE</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_TIMESTAMP</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="exp_errno"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_TIMESTAMPNS</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_sockopt_get_integer" type="script">
      <objective>Check that any integer socket option can be processed correctly when a variable of different integer type (byte, int32, or anything else) is used for passing to get option value.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=TCP_DEFER_ACCEPT) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=TCP_KEEPCNT) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=TCP_KEEPINTVL) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=TCP_KEEPIDLE) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=TCP_MAXSEG) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
        <results tags="linux&amp;ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
        <results tags="linux&amp;ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
        <results tags="linux&amp;ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
        <results tags="linux&amp;ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IPV6_UNICAST_HOPS) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IPV6_MULTICAST_HOPS) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IPV6_UNICAST_HOPS) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IPV6_MULTICAST_HOPS) is unsupported</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IPV6_MULTICAST_HOPS) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IPV6_MULTICAST_HOPS) is unsupported</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IPV6_MULTICAST_HOPS) is unsupported</verdict>
          </result>
        </results>
        <results tags="ppc64">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IPV6_MULTICAST_HOPS) is unsupported</verdict>
          </result>
        </results>
        <results tags="ppc64">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IPV6_ROUTER_ALERT) is unsupported</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>first getsockopt(opt_name=IPV6_UNICAST_HOPS) failed with rc=-1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>first getsockopt(opt_name=IPV6_MULTICAST_HOPS) failed with rc=-1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>first getsockopt(opt_name=IPV6_ROUTER_ALERT) failed with rc=-1, errno=EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux)">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=SO_TYPE) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_MTU_DISCOVER) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_TTL) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_TOS) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) is unsupported</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=SO_TIMESTAMPING) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=SO_TYPE) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=SO_SNDBUF) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=SO_RCVLOWAT) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=SO_RCVBUF) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=SO_PRIORITY) has reduced opt_len to sizeof(int)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) has reduced opt_len to sizeof(char)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_MTU_DISCOVER) has reduced opt_len to sizeof(char)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_TTL) has reduced opt_len to sizeof(char)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_TOS) has reduced opt_len to sizeof(char)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) is unsupported</verdict>
          </result>
        </results>
        <results tags="linux&amp;!v5|v5&amp;(!scalable_passive&amp;!scalable_active&amp;!socket_cache)">
          <result value="PASSED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) has reduced opt_len to sizeof(char)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="ppc64&amp;!v5" key="OL 7913" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="ppc64&amp;!v5" key="OL 7913" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) is unsupported</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;(scalable_passive|scalable_active|socket_cache)" key="ON-5391">
          <result value="FAILED">
            <verdict>getsockopt(opt_name=IP_MULTICAST_TTL) is unsupported</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>opt_val returned by the second getsockopt() call is not equal to opt_val returned by the first call</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>Using opt_len &lt; sizeof(int) affects the result of opt_val returned by getsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>Using opt_len &lt; sizeof(int) affects the result of opt_val returned by getsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>Using opt_len &lt; sizeof(int) affects the result of opt_val returned by getsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>Using opt_len &lt; sizeof(int) affects the result of opt_val returned by getsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>Using opt_len &lt; sizeof(int) affects the result of opt_val returned by getsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>Using opt_len &lt; sizeof(int) affects the result of opt_val returned by getsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ppc64" notes="Due to big-endianness, non-zero byte is at the end and it is lost if data is truncated">
          <result value="FAILED">
            <verdict>Using opt_len &lt; sizeof(int) affects the result of opt_val returned by getsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_TYPE</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_sockopt_set_integer" type="script">
      <objective>Check that any integer socket option can be processed correctly when a variable of different integer type (byte, int32, or anything else) is used for passing to set option value.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-2.6&lt;40&amp;!el&amp;!v5">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-2.6&lt;40&amp;!el&amp;!v5">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="opt_val">64</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="Fix for CVE-2010-4165 see also OL 5986">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="opt_val">64</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="Fix for CVE-2010-4165 see also OL 5986">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;=20" key="OL 4842">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux-2.6&gt;=20" key="OL 4842">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-2.6&gt;=20" key="OL 4842">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-2.6&gt;=20" key="OL 4842">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">1000</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">1000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" notes="IPV6 socket options don't work on AF_INET sockets">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=ENOPROTOOPT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux" key="OL 4842">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val">100</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val">65536</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val">100</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val">65536</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">5</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val">60</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val">60</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_DEFER_ACCEPT</arg>
        <arg name="opt_val">60000</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_RCVBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_SNDBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_SNDBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name"/>
        <arg name="opt_val">256</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>getsockopt() returns different option value than was set by setsockopt()</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">1000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val">65536</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name"/>
        <arg name="opt_val">1000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_RCVBUF</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_SNDBUF</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="(linux)">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val">255</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">5</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_MULTICAST_TTL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="opt_val">100</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="opt_val">100</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">60</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">60</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">60</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">60</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="opt_val">65536</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_TOS</arg>
        <arg name="opt_val">64</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val">255</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="opt_val">1</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name"/>
        <arg name="opt_val">127</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name"/>
        <arg name="opt_val">127</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name"/>
        <arg name="opt_val">79</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_MULTICAST_HOPS</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">1000</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">0</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">4</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">5</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IPV6_UNICAST_HOPS</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val">60000</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">IPV6_ROUTER_ALERT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_TTL</arg>
        <arg name="opt_val">65536</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="opt_val">-1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">IP_MTU_DISCOVER</arg>
        <arg name="opt_val">10</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val">60000</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_PRIORITY</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_RCVBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_RCVBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_TIMESTAMPING</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_RCVLOWAT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">SO_SNDBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">SO_SNDBUFFORCE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_MAXSEG</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_KEEPIDLE</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">1</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len">3</arg>
        <arg name="opt_name">TCP_KEEPCNT</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain">PF_INET6</arg>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name">TCP_KEEPINTVL</arg>
        <arg name="opt_val"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name"/>
        <arg name="opt_val">1048576</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="opt_len"/>
        <arg name="opt_name"/>
        <arg name="opt_val">65535</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>setsockopt() failed with errno=EINVAL</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_select_negative_timeout" type="script">
      <objective>Check that select() function reports an error while using with negative timeout.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_select_pselect_neg_fdnum" type="script">
      <objective>Check that select() and pselect() report an error when they are used with negative maxfd parameter.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="func">select</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="func">pselect</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_select_all_zeros" type="script">
      <objective>Check that select() function successfully completes when it is called with readset, writeset, exceptset set to NULL and zero timeout.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_select_inapprop_maxfd" type="script">
      <objective>Check that select() does not process descriptors whose number more than the value of maxfd parameter minus one.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_select_many_descrs" type="script">
      <objective>Check that select() function successfully works with maximum number descriptors opened by a process.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="connect_sockets">FALSE</arg>
        <arg name="ef_no_fail"/>
        <arg name="ef_select_fast"/>
        <arg name="env"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Just-created sockets are readable</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect_sockets">TRUE</arg>
        <arg name="ef_no_fail"/>
        <arg name="ef_select_fast"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect_sockets">TRUE</arg>
        <arg name="ef_no_fail"/>
        <arg name="ef_select_fast"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="connect_sockets"/>
        <arg name="ef_no_fail">1</arg>
        <arg name="ef_select_fast"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;(ool_loop=3|ool_loop=4)&amp;!reuse_stack" notes="loop3 mode needs one more fd in this case">
          <result value="FAILED">
            <verdict>connect() with maxfd socket failed with EMFILE error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect_sockets"/>
        <arg name="ef_no_fail">1</arg>
        <arg name="ef_select_fast"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;(ool_loop=3|ool_loop=4)&amp;!reuse_stack" notes="loop3 mode needs one more fd in this case">
          <result value="FAILED">
            <verdict>connect() with maxfd socket failed with EMFILE error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect_sockets"/>
        <arg name="ef_no_fail">0</arg>
        <arg name="ef_select_fast"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;(ool_loop=3|ool_loop=4)&amp;!reuse_stack" notes="loop3 mode needs one more fd in this case">
          <result value="FAILED">
            <verdict>connect() with maxfd socket failed with EMFILE error</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="connect_sockets"/>
        <arg name="ef_no_fail">0</arg>
        <arg name="ef_select_fast"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;(ool_loop=3|ool_loop=4)&amp;!reuse_stack" notes="loop3 mode needs one more fd in this case">
          <result value="FAILED">
            <verdict>connect() with maxfd socket failed with EMFILE error</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_shutdown_incorrect_how" type="script">
      <objective>Check that shutdown() function reports an error when it is called with unknown value of how parameter.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_shutdown_before_connect" type="script">
      <objective>Check that shutdown() function reports an error while using for not connected sockets.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <arg name="bind_to"/>
        <arg name="shut_how"/>
        <notes/>
      </iter>
    </test>
    <test name="func_poll_nval" type="script">
      <objective>Check that poll() function correctly processes situation when one of pollfd entries contains fd field set to a value that does not correspond to any opened sockets or files.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLIN</arg>
        <arg name="timeout">-1</arg>
        <arg name="nfds">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLIN</arg>
        <arg name="timeout">0</arg>
        <arg name="nfds">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLIN</arg>
        <arg name="timeout">1</arg>
        <arg name="nfds">1</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLPRI</arg>
        <arg name="timeout">-1</arg>
        <arg name="nfds">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLOUT</arg>
        <arg name="timeout">0</arg>
        <arg name="nfds">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLERR</arg>
        <arg name="timeout">0</arg>
        <arg name="nfds">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLHUP</arg>
        <arg name="timeout">1</arg>
        <arg name="nfds">1</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="evt">POLLNVAL</arg>
        <arg name="timeout">-1</arg>
        <arg name="nfds">3</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_poll_fd_negative" type="script">
      <objective>Check that poll() function correctly processes situation when pollfd entry contains fd field set to a negative value</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="nfds">3</arg>
        <arg name="evt">POLLIN</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="nfds">3</arg>
        <arg name="evt">POLLOUT</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_poll_zero_evt" type="script">
      <objective>Check that poll() function correctly processes situation when pollfd entries contain events field set to zero.</objective>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>poll() called on IUT just created socket with zero requested events field returns 1 instead of 0 ('revents' field is set to POLLHUP)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_poll_nentries" type="script">
      <objective>Check that poll() function processes no more than nfds entries of fdarray.</objective>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="nfds">3</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_pselect_ppoll_negative_timeout" type="script">
      <objective>Check that pselect() function reports an error while using with negative timeout.</objective>
      <notes>Linux implements pselect() using select() and truncates nanoseconds (even negative).</notes>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="iomux">pselect</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="iomux">ppoll</arg>
        <notes/>
        <results tags="linux-2.6&lt;=26">
          <result value="PASSED">
            <verdict>ppoll() function hangs with {-1,0} timeout.</verdict>
            <verdict>ppoll() function hangs with {-1,1} timeout.</verdict>
            <verdict>ppoll() function hangs with {0,-2147483648} timeout.</verdict>
            <verdict>ppoll() function hangs with {-1,-1} timeout.</verdict>
            <verdict>ppoll() called  on IUT with {0,-2000} timeout returns 0 instead of -1</verdict>
            <verdict>ppoll() function hangs with {1,-2000} timeout.</verdict>
          </result>
          <result value="PASSED">
            <verdict>ppoll() function hangs with {-1,0} timeout.</verdict>
            <verdict>ppoll() function hangs with {-1,1} timeout.</verdict>
            <verdict>ppoll() function hangs with {0,-9223372036854775808} timeout.</verdict>
            <verdict>ppoll() function hangs with {-1,-1} timeout.</verdict>
            <verdict>ppoll() called  on IUT with {0,-2000} timeout returns 0 instead of -1</verdict>
            <verdict>ppoll() function hangs with {1,-2000} timeout.</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="iomux_notmasked_signals" type="script">
      <objective>Check that iomux functions allow to pass signal mask containing signals that cannot be caught.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="iomux">pselect</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="iomux">ppoll</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="iomux">epoll_pwait</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_recvmsg_ctrunc" type="script">
      <objective>Check that recvmsg() function sets MSG_CTRUNC flag in msg_flags field of msghdr structure if ancillary data was truncated: the kernel has more ancillary data to return than the process has allocated room for (msg_controllen).</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_f"/>
        <notes/>
      </iter>
    </test>
    <test name="tx_buf_len_not_connected" type="script">
      <objective>Check the behaviour of transmit functions on not connected socket in the following cases: - zero length and NULL buffer; - zero length and not NULL buffer; - not zero length and NULL buffer.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>template_send() function called with NULL buffer and not zero buffer length returns -1, and sets errno to EOPNOTSUPP, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>template_send() function called with not NULL buffer and zero buffer length returns -1, and sets errno to EOPNOTSUPP instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>template_send() function called with  NULL buffer and zero buffer length returns -1, and sets errno to EOPNOTSUPP instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" notes="The iteration fails on Linux 2.6.">
          <result value="FAILED">
            <verdict>writev() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
        <results tags="v5" key="OLDSW2V0-174">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" notes="The iteration fails on Linux 2.6.">
          <result value="FAILED">
            <verdict>writev() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
        <results tags="v5" key="OLDSW2V0-174">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux-2.6&lt;=18)&amp;!v5">
          <result value="FAILED">
            <verdict>write() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="(linux-2.6&lt;=18)&amp;!v5">
          <result value="FAILED">
            <verdict>write() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() function called with NULL buffer and not zero buffer length returns -1, and sets errno to EPIPE, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() function called with NULL buffer and not zero buffer length returns -1, and sets errno to ENOSYS, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() function called with not NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() function called with not NULL buffer and zero buffer length returns -1, and sets errno to ENOSYS instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmmsg() function called with  NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() function called with  NULL buffer and zero buffer length returns -1, and sets errno to ENOSYS instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmsg() function called with NULL buffer and not zero buffer length returns -1, and sets errno to EPIPE, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmsg() function called with not NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendmsg() function called with  NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendto() function called with NULL buffer and not zero buffer length returns -1, and sets errno to EPIPE, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendto() function called with not NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sendto() function called with  NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>send() function called with NULL buffer and not zero buffer length returns -1, and sets errno to EPIPE, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>send() function called with not NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>send() function called with  NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>writev() function called with NULL buffer and not zero buffer length returns -1, and sets errno to EPIPE, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>writev() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" notes="OL 4835 comment 7">
          <result value="FAILED">
            <verdict>writev() function called with not NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>writev() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" notes="OL 4835 comment 7">
          <result value="FAILED">
            <verdict>writev() function called with  NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>write() function called with NULL buffer and not zero buffer length returns -1, and sets errno to EPIPE, but it is expected to be EFAULT, ENOTCONN, or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&lt;=18&amp;!v5">
          <result value="FAILED">
            <verdict>write() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
        <results tags="(linux-2.6&gt;=24)|v5">
          <result value="FAILED">
            <verdict>write() function called with not NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux-2.6&lt;=18&amp;!v5">
          <result value="FAILED">
            <verdict>write() function returns 0 sending zero length buffer on not connected socket instead of -1</verdict>
          </result>
        </results>
        <results tags="(linux-2.6&gt;=24)|v5">
          <result value="FAILED">
            <verdict>write() function called with  NULL buffer and zero buffer length returns -1, and sets errno to EPIPE instead of ENOTCONN or EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="tx_buf_len_connected" type="script">
      <objective>Check the behaviour of transmit functions in the following cases: - zero length and NULL buffer; - zero length and not NULL buffer; - not zero length and NULL buffer. .</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaivour of template_send() with NULL buffer pointer and positive buffer length: errno is set to EOPNOTSUPP instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="!ool_ndebug" key="ON-3356">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="!ool_ndebug" key="ON-3356">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;build_ip6&amp;!(ool_loop=0)" key="ST-1845" notes="sendmmsg() is not supported for TCP sockets in onload">
          <result value="FAILED">
            <verdict>Unexpected behaivour of sendmmsg() with NULL buffer pointer and positive buffer length: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;build_ip6&amp;!(ool_loop=0)" key="ST-1845" notes="sendmmsg() is not supported for TCP sockets in onload">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;build_ip6&amp;!(ool_loop=0)" key="ST-1845" notes="sendmmsg() is not supported for TCP sockets in onload">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;build_ip6" key="ST-1845" notes="sendmmsg() is not supported for TCP sockets in onload">
          <result value="FAILED">
            <verdict>Unexpected behaivour of sendmmsg() with NULL buffer pointer and positive buffer length: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;build_ip6" key="ST-1845" notes="sendmmsg() is not supported for TCP sockets in onload">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;build_ip6" key="ST-1845" notes="sendmmsg() is not supported for TCP sockets in onload">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)|!(ool_loop=0)">
          <result value="FAILED">
            <verdict>Unexpected behaivour of sendmmsg() with NULL buffer pointer and positive buffer length: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)|!(ool_loop=0)">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)|!(ool_loop=0)">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Unexpected behaivour of sendmmsg() with NULL buffer pointer and positive buffer length: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Unexpected behaivour of sendmmsg() with NULL buffer pointer and positive buffer length: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>Unexpected behaivour of sendmmsg() with NULL buffer pointer and positive buffer length: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="buflen">0</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>Unexpected failure of the send function, errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen">1</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="buflen"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="rx_buf_len_zero_connected" type="script">
      <objective>Check that receive functions allow dummy receiving in zero length buffer on connected sockets.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="buffer">TRUE</arg>
        <arg name="env"/>
        <arg name="func">aio_read</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer">FALSE</arg>
        <arg name="env"/>
        <arg name="func">aio_read</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO DGRAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">aio_read</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="Onload-specific function does not work with not accelerated sockets">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="Onload-specific function does not work with not accelerated sockets">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload-specific function does not work with not accelerated sockets">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Onload-specific function does not work with not accelerated sockets">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">onload_zc_recv</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>This test is not applicable for onload_zc_recv() function</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Receive function unexpectedly failed with errno RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">read</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">readv</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="buffer"/>
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_io_after_listen" type="script">
      <objective>Check that it is not permitted to call any send/receive function on listening socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
        <results tags="v5&amp;linux">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
        <results tags="v5&amp;linux">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">od_send</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>od_send() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_write</arg>
        <notes/>
        <results tags="linux" notes="MSG_NOSIGNAL flag is switched ON">
          <result value="FAILED">
            <verdict>aio_write() called on listening socket fails with errno EPIPE</verdict>
            <verdict>SIGPIPE signal is not received while calling aio_write() function on listening socket</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_write_callback</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>aio_write_callback() called on listening socket fails with errno EPIPE</verdict>
            <verdict>SIGPIPE signal is not received while calling aio_write_callback() function on listening socket</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_write_signal</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>aio_write_signal() called on listening socket fails with errno EPIPE</verdict>
            <verdict>SIGPIPE signal is not received while calling aio_write_signal() function on listening socket</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_write_suspend</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>aio_write_suspend() called on listening socket fails with errno EPIPE</verdict>
            <verdict>SIGPIPE signal is not received while calling aio_write_suspend() function on listening socket</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_write_poll</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>aio_write_poll() called on listening socket fails with errno EPIPE</verdict>
            <verdict>SIGPIPE signal is not received while calling aio_write_poll() function on listening socket</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">writev</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>writev() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">write</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>write() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmsg() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendto() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>send() called on listening socket fails with errno EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_read</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>recvmmsg() called on listening socket fails with unexpected errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">read</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">readv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_read_poll</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_read_suspend</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_read_signal</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">aio_read_callback</arg>
        <notes/>
      </iter>
    </test>
    <test name="incorrect_iovec_pointer" type="script">
      <objective>Check that recvmsg(), recvmmsg(), readv(), writev(), sendmsg(), sendmmsg() or template_send functions correctly process NULL as a pointer to struct iovec and value of the iov_len.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>template_send() function called on 'iut_s' returns -1, but: errno is set to EOPNOTSUPP instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Function template_send() returned -1. Errno is set to EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Function template_send() returned -1. Errno is set to EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0)&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="v5&amp;!(ool_loop=0)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="v5&amp;!(ool_loop=0)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop=0)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="v5&amp;!(ool_loop=0)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>Function sendmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Function recvmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Function recvmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() with zero vector length fails with errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() with zero vector length fails with errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Function recvmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Function recvmmsg() returned -1. Errno is set to ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() with zero vector length fails with errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg() with zero vector length fails with errno ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">TRUE</arg>
        <arg name="vector">FALSE</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0)&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg() function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EFAULT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen">FALSE</arg>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="sock_type"/>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">readv</arg>
        <arg name="sock_type"/>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="sock_type"/>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="sock_type"/>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="sock_type"/>
        <arg name="veclen"/>
        <arg name="vector"/>
        <notes/>
      </iter>
    </test>
    <test name="incorrect_address_length" type="script">
      <objective>Check that sendto(), sendmsg() and sendmmsg() functions correctly process invalid length value of the target address parameter.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendmsg() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendto() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendto() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendto() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendto() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendto() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Unexpected behaviour, sendto() unexpectedly succeed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>Unexpected behaviour, onload_zc_send() failed with errno EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>Unexpected behaviour, onload_zc_send_user_buf() failed with errno EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">4</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">1-4</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">5</arg>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">5-?</arg>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">5</arg>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">5-?</arg>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">5</arg>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="corrupt">5-?</arg>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_send_too_long_dgram" type="script">
      <objective>Check that a datagram larger than 64K (including all headers) cannot be sent.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="dgram_size">65507</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
        <results tags="linux" key="OL 7519">
          <result value="PASSED"/>
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="dgram_size"/>
        <arg name="env"/>
        <arg name="func">aio_write</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO DGRAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="dgram_size">65508</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dgram_size">65527</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dgram_size">65528</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
      </iter>
    </test>
    <test name="func_ioctl_null" type="script">
      <objective>Check the behavior of ioctl() requests with NULL argument.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFHWADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFCONF</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFFLAGS</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFFLAGS</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFNETMASK</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFNETMASK</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFBRDADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFBRDADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFDSTADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFDSTADDR</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFMTU</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFMTU</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">TRUE</arg>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSHWTSTAMP</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFHWADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFCONF</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFFLAGS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCSIFFLAGS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCSIFADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFNETMASK</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCSIFNETMASK</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFBRDADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCSIFBRDADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFDSTADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCSIFDSTADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCGIFMTU</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCSIFMTU</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFHWADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFHWADDR</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCINQ</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data">FALSE</arg>
        <arg name="req">SIOCSHWTSTAMP</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGSTAMPNS</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-2.6.24">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to EFAULT instead of ENOENT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGSTAMP</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-2.6.24">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to EFAULT instead of ENOENT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCSHWTSTAMP</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSHWTSTAMP</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCATMARK</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">FIONBIO</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">FIONREAD</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFCONF</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFFLAGS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCSIFFLAGS</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCSIFADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFNETMASK</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCSIFNETMASK</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFBRDADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCSIFBRDADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFDSTADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCSIFDSTADDR</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCGIFMTU</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive">FALSE</arg>
        <arg name="rcvd_data">TRUE</arg>
        <arg name="req">SIOCSIFMTU</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFCONF</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFFLAGS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFFLAGS</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFADDR</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFADDR</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFNETMASK</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFNETMASK</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFBRDADDR</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFBRDADDR</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFDSTADDR</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFDSTADDR</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGIFMTU</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSIFMTU</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCGPGRP</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">SIOCSPGRP</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="passive"/>
        <arg name="rcvd_data"/>
        <arg name="req">FIOASYNC</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="send_oob_dgram" type="script">
      <objective>Check that sending functions correctly process MSG_OOB flag if called on socket of the SOCK_DGRAM type.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func_tested">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func_tested">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func_tested">sendmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmmsg(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func_tested">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmsg(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func_tested">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmsg(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func_tested">sendmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendmsg(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func_tested">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendto(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func_tested">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendto(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func_tested">sendto</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>sendto(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func_tested">send</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>send(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func_tested">send</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>send(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func_tested">send</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>send(MSG_OOB) succeeded unexpectedly</verdict>
            <verdict>recv() on 'tst_s' succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func_tested">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ST-1749" notes="onload_zc_send() function is supported only for accelerated sockets; ST-1749 is about udp_connect_no_handover tag">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func_tested">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ST-1749" notes="onload_zc_send() function is supported only for accelerated sockets; ST-1749 is about udp_connect_no_handover tag">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func_tested">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ST-1749" notes="onload_zc_send() function is supported only for accelerated sockets; ST-1749 is about udp_connect_no_handover tag">
          <result value="FAILED">
            <verdict>onload_zc_send(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func_tested">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ST-1749" notes="onload_zc_send() function is supported only for accelerated sockets; ST-1749 is about udp_connect_no_handover tag">
          <result value="FAILED">
            <verdict>onload_zc_send(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func_tested">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_send() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func_tested">onload_zc_send_user_buf</arg>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_send() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func_tested">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_send() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func_tested">onload_zc_send</arg>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_send() function is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>onload_zc_send(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ESOCKTNOSUPPORT instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func_tested">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func_tested">sendmmsg</arg>
        <notes/>
        <results tags="v5&amp;(libc&lt;=13)">
          <result value="FAILED">
            <verdict>sendmmsg(MSG_OOB) function called on 'iut_s' returns -1, but: errno is set to ENOSYS instead of EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func_tested">onload_zc_send</arg>
        <notes/>
        <results tags="v5">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func_tested">onload_zc_send</arg>
        <notes/>
        <results tags="v5">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func_tested">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func_tested">onload_zc_send_user_buf</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func_tested">onload_zc_send_user_buf</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func_tested">send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func_tested">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func_tested">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func_tested">send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func_tested">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func_tested">sendmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func_tested">send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func_tested">sendto</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func_tested">sendmsg</arg>
        <notes/>
      </iter>
    </test>
    <test name="recv_oob_dgram" type="script">
      <objective>Check that receiving functions correctly process MSG_OOB flag if called on socket of the SOCK_DGRAM type.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_tested">onload_zc_hlrx_recv_zc</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_tested">onload_zc_hlrx_recv_copy</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_tested">onload_zc_recv</arg>
        <notes/>
        <results tags="v5&amp;branch_onload7.1" key="WONTFIX ON-11836">
          <result value="PASSED">
            <verdict>onload_zc_recv() with MSG_OOB flag ignores it and returns usual data</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_tested">recvmmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>recvmmsg() with MSG_OOB flag ignores it and returns usual data</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_tested">recvmsg</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>recvmsg() with MSG_OOB flag ignores it and returns usual data</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_tested">recvfrom</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>recvfrom() with MSG_OOB flag ignores it and returns usual data</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_tested">recv</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>recv() with MSG_OOB flag ignores it and returns usual data</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="func_ioctl_unknown" type="script">
      <objective>Check the behavior of ioctl() requests with invalid ioctl number.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="how">accepted</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)|(v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack)))" key="ON-5877">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="how">accepted</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)|(v5&amp;(ool_loop&gt;1|(ool_loop=1&amp;reuse_stack)))" key="ON-5877">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="how">accepted</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)|v5" key="ON-5877">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="how">accepted</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)|v5" key="ON-5877">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="how">created</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="how">created</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="how">bound</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="how">bound</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="how">listening</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="how">listening</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="how">connected</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="how">connected</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="how">client</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="how">client</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="how">created</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="how">created</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="how">bound</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="how">bound</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="how">listening</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="how">listening</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="how">connected</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="how">connected</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="how">client</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="how">client</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="how"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="how"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux-3&gt;=5|(ul-64&amp;linux-2.6&gt;=39)">
          <result value="FAILED">
            <verdict>ioctl() function called on IUT returned -1, but: errno is set to ENOTTY instead of EINVAL</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="dgram_empty" type="script">
      <objective>Check behaviour of functions send() and recv() called with empty datagram.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sender">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sender">FALSE</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>ioctl(FIONREAD) returns 0 when there is empty datagram in receive queue and there is no datagrams</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="addr_len_inapprop_bind" type="script">
      <objective>The test deals with bind() function. It checks that Socket API functions take into account the value passed in address_len parameter, and report an appropriate error if it is incorrect.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">small</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">small</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">small</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">small</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">big</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>bind() called with large addr_length parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_ucast</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>bind() called with large addr_length parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="len_val">large</arg>
        <notes/>
      </iter>
    </test>
    <test name="addr_len_inapprop_connect" type="script">
      <objective>The test deals with  connect() function. It checks that Socket API functions take into account the value passed in  address_len parameter, and report an appropriate error if it is incorrect.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" key="ON-881">
          <result value="FAILED">
            <verdict>connect() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" key="ON-881">
          <result value="FAILED">
            <verdict>connect() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" key="ON-881">
          <result value="FAILED">
            <verdict>connect() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>connect() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-881">
          <result value="FAILED">
            <verdict>connect() called with large 'len_val' parameter returned success instead of expected failure(-1)</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="len_val">large</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="len_val">small</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.p2p_ip6ip4mapped</arg>
        <arg name="len_val">big</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="len_val"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_create" type="script">
      <objective>Check that epoll_create() function correctly reports an error when size is negative.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <notes/>
      <results tags="v5" notes="epoll_create parameter is not really used">
        <result value="FAILED">
          <verdict>epoll_create(-1) returned success</verdict>
        </result>
        <result value="PASSED"/>
      </results>
      </iter>
    </test>
    <test name="func_epoll_ctl_add" type="script">
      <objective>Check that epoll_ctl() function correctly reports the error when it is called twice with EPOLL_CTL_ADD operation and the same file descriptor.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_wait_bad_maxevents" type="script">
      <objective>Check that epoll_wait() function correctly reports the error when it is called with non-positive maxevents.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="events"/>
        <arg name="maxevents"/>
        <arg name="sock_type"/>
        <arg name="timeout"/>
        <arg name="iomux"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_ctl_bad_epfd" type="script">
      <objective>Check that epoll_ctl() function correctly reports an error when it is called with bad epfd value.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="create"/>
        <arg name="env"/>
        <arg name="epfd"/>
        <arg name="fd"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_ctl_bad_fd" type="script">
      <objective>Check that epoll_ctl() function correctly reports an error when it is called with bad fd value.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_ctl_null_events" type="script">
      <objective>Check that epoll_ctl() function correctly delete descriptor from epoll fd when it is called with NULL events.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="wait_between"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="wait_between"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_ctl_bad_op" type="script">
      <objective>Check that epoll_ctl() function correctly reports the error when it is called with incorrect operation.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_wait_bad_epfd" type="script">
      <objective>Check that epoll_wait() function correctly reports an error when it is called with bad epfd value.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="create"/>
        <arg name="env"/>
        <arg name="epfd"/>
        <arg name="sock_type"/>
        <arg name="timeout"/>
        <arg name="iomux"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_ctl_mod_del" type="script">
      <objective>Check that epoll_ctl() function correctly reports the error when it is called with EPOLL_CTL_MOD or EPOLL_CTL_DEL operation and with target file descriptor that is not in epoll descriptor.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="descr_type">epoll_fd</arg>
        <arg name="env"/>
        <arg name="error"/>
        <arg name="oper"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(ool_epoll=2)&amp;!ool_epoll_ctl_fast" notes="errno is different from Linux, but sensible">
          <result value="FAILED">
            <verdict>epoll_ctl() returns -1: errno is set to ENOENT instead of EINVAL</verdict>
          </result>
          <result value="PASSED" key="ON-8892 78696"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="descr_type">file</arg>
        <arg name="env"/>
        <arg name="error"/>
        <arg name="oper"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="descr_type">socket</arg>
        <arg name="env"/>
        <arg name="error"/>
        <arg name="oper"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(ool_epoll=2)&amp;ool_epoll_ctl_fast" notes="ool_epoll_ctl_fast looses error">
          <result value="FAILED">
            <verdict>epoll_ctl() returned 0 instead -1.</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="unbound" type="script">
      <objective>Check that just-created socket is correctly handled by various functions.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="iomux">oo_epoll</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
        <results tags="!(ool_epoll=1)&amp;!(ool_epoll=3)" key="ON-3671">
          <result value="FAILED">
            <verdict>Function 'oo_epoll' returns -1, but expected to return 1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="sys_call"/>
        <notes/>
        <results tags="linux&amp;v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>recvmmsg_alt() returns -1, but: errno is set to ENOSYS instead of ENOTCONN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="sys_call"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>template_send() returns -1, but: errno is set to EOPNOTSUPP instead of EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="sys_call"/>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>simple_zc_send() returns -1, but: errno is set to EOPNOTSUPP instead of EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="sys_call"/>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>simple_zc_send_user_buf() returns -1, but: errno is set to EOPNOTSUPP instead of EDESTADDRREQ</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="sys_call"/>
        <notes/>
        <results tags="v5">
          <result value="FAILED">
            <verdict>sendmmsg_alt() returns -1, but: errno is set to ENOSYS instead of EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">write</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sys_write</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">writev</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sys_writev</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">od_send</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">read</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sys_read</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">readv</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">sys_readv</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="iomux">select</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="iomux">pselect</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="iomux">poll</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="iomux">ppoll</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="iomux">epoll</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="iomux">epoll_pwait</arg>
        <arg name="is_iomux"/>
        <arg name="sock_type"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
    </test>
    <test name="func_recvmmsg_negative_timeout" type="script">
      <objective>Check that recvmmsg() function reports an error while using with negative timeout.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
    </test>
    <test name="func_recvmmsg_all_zeros" type="script">
      <objective>Using recvmmsg() function with NULL mmsghdr, zero vlen and zero timeout</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
    </test>
    <test name="func_zc_recv_all_zeros" type="script">
      <objective>Check that onload_zc_recv() function successfully completes when it is called with all the arguments except socket fd equal to zero (NULL).</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="read_zero_bytes" type="script">
      <objective>Check that attempt to read zero bytes never blocks.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is not supported for not accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5&amp;!(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_hlrx_recv_copy() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_recv() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" notes="Receive functions behave the same way on Linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
        <results tags="v5" notes="recvmmsg() is not supported for TCP sockets on Onload">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes resulted in error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">FALSE</arg>
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Attempt to read zero bytes blocks</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="is_pipe"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready">TRUE</arg>
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env"/>
        <arg name="func">read</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env"/>
        <arg name="func">readv</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_ready"/>
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <arg name="is_pipe"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="sig_err_handler" type="script">
      <objective>Check what happens if signal handler is set to SIG_ERR.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_sig">sigaction</arg>
        <arg name="sig"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>sigaction() successes setting SIG_ERR signal handler</verdict>
            <verdict>RPC server is dead as a result of receiving signal</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_sig">signal</arg>
        <arg name="sig"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_sig">bsd_signal</arg>
        <arg name="sig"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_sig">sysv_signal</arg>
        <arg name="sig"/>
        <notes/>
      </iter>
    </test>
    <test name="func_pipe" type="script">
      <objective>Check that pipe() or pipe2 reports an appropriate error when it is called with incorrect arguments</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="bad_flags"/>
        <arg name="bad_pipefds"/>
        <arg name="env"/>
        <arg name="use_pipe2"/>
        <notes/>
      </iter>
    </test>
    <test name="func_pipe_wrong_fd" type="script">
      <objective>Check that pipe() or pipe2 reports an appropriate error when it is called with incorrect arguments</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_pipe2"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_sock_send" type="script">
      <objective>Check that it is not possible to use socket sending functions with pipe</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <notes/>
        <results tags="v5" key="ON-2319">
          <result value="FAILED">
            <verdict>send() successeed on the write end of pipe</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <notes/>
        <results tags="v5" key="ON-2319">
          <result value="FAILED">
            <verdict>sendto() successeed on the write end of pipe</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <notes/>
        <results tags="v5" key="ON-2319">
          <result value="FAILED">
            <verdict>sendmsg() successeed on the write end of pipe</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <notes/>
      </iter>
    </test>
    <test name="pipe_sock_recv" type="script">
      <objective>Check that it is not possible to use socket receiving functions with pipe</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_copy</arg>
        <notes/>
        <results tags="v5" notes="Expected behavior, onload_zc_hlrx_alloc() cannot work with pipe FD">
          <result value="PASSED">
            <verdict>onload_zc_hlrx_recv_copy() on the read end of pipe failed with unexpected errno TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_hlrx_recv_zc</arg>
        <notes/>
        <results tags="v5" notes="Expected behavior, onload_zc_hlrx_alloc() cannot work with pipe FD">
          <result value="PASSED">
            <verdict>onload_zc_hlrx_recv_zc() on the read end of pipe failed with unexpected errno TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_recv</arg>
        <notes/>
        <results tags="v5" key="ON-2319">
          <result value="PASSED">
            <verdict>onload_zc_recv() on the read end of pipe failed with unexpected errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <notes/>
        <results tags="v5" key="ON-2319, 60749">
          <result value="FAILED">
            <verdict>Non-zero msg_flags value was returned</verdict>
            <verdict>recvmsg() successeed on the read end of pipe</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvfrom</arg>
        <notes/>
        <results tags="v5" key="ON-2319">
          <result value="FAILED">
            <verdict>recvfrom() successeed on the read end of pipe</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <notes/>
        <results tags="v5" key="ON-2319">
          <result value="FAILED">
            <verdict>recv() successeed on the read end of pipe</verdict>
          </result>
          <result value="PASSED"/>
        </results>
      </iter>
    </test>
    <test name="pipe_sock_func" type="script">
      <objective>Check that it is not possible to use socket receiving functions with pipe</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="write_end"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="shutdown_how"/>
        <arg name="write_end"/>
        <notes/>
      </iter>
    </test>
    <test name="func_epoll_ctl_bad_fd_type" type="script">
      <objective>Check that epoll_ctl() function correctly reports an error when it is called with bad fd type.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="func_execve_null" type="script">
      <objective>Check execve() function behavior with NULL as argv and/or envp.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="params"/>
        <notes/>
      </iter>
    </test>
    <test name="bond_bind_remove" type="script">
      <objective>Check that removing bonding is handled correctly when there is a socket bound to an address from bonding interface</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="mode"/>
        <arg name="restart_close_sock"/>
        <arg name="remove_slave"/>
        <arg name="remove_bond"/>
        <arg name="max_tries"/>
        <notes/>
      </iter>
    </test>
    <test name="extra_large_packet" type="script">
      <objective>Call send()/recv()/sendto()/recvfrom() with very big packet length.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="conn_type"/>
        <arg name="direction"/>
        <arg name="env"/>
        <arg name="len"/>
        <arg name="tst_send"/>
        <notes/>
      </iter>
    </test>
    <test name="msg_controllen_inapprop" type="script">
      <objective>Check what happens when NULL msg_control and/or zero msg_controllen are passed to receive functions</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0|ool_loop=1&amp;!reuse_stack)" notes="onload_zc_recv() is supported only for accelerated sockets">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;(!v5|ool_loop=0)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;(!v5|ool_loop=0)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;(!v5|ool_loop=0)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;(!v5|ool_loop=0)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;(!v5|ool_loop=0)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>No control messages were returned</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;(!v5|ool_loop=0)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>No control messages were returned</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="linux" notes="onload_zc_recv() is Onload-specific">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="linux" notes="onload_zc_recv() is Onload-specific">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>No control messages were returned</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>No control messages were returned</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;!v5" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;!v5" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;!v5" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">TRUE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;!v5" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>MSG_CTRUNC flag was not set unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;!v5" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>No control messages were returned</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf">FALSE</arg>
        <arg name="opt_name"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="zero_len">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;4|linux-4&lt;14)&amp;!v5" notes="SO_TIMESTAMP is supported for TCP only since 4.14 kernel">
          <result value="FAILED">
            <verdict>No control messages were returned</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name">SO_TIMESTAMP</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_recv() is Onload-specific">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name">SO_TIMESTAMP</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="zero_len"/>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_recv() is Onload-specific">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name">IP_PKTINFO</arg>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_recv() is Onload-specific">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
        <results tags="v5&amp;!(udp_connect_no_handover&amp;laddr_all)" notes="onload_zc_recv() is Onload-specific">
          <result value="FAILED">
            <verdict>The tested function unexpectedly failed with errno RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf"/>
        <arg name="opt_name">SO_TIMESTAMP</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="zero_len"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf"/>
        <arg name="opt_name">IP_PKTINFO</arg>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmsg</arg>
        <arg name="null_buf"/>
        <arg name="opt_name">IPV6_RECVPKTINFO</arg>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">onload_zc_recv</arg>
        <arg name="null_buf"/>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recvmmsg</arg>
        <arg name="null_buf"/>
        <arg name="opt_name"/>
        <arg name="sock_type"/>
        <arg name="zero_len"/>
        <notes/>
      </iter>
    </test>
    <test name="ipv4_mapped_in_ipv6" type="script">
      <objective>Check what happens when IPv6 packet is received in which source and/or destination addresses are IPv4-mapped IPv6 addresses.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_dst">TRUE</arg>
        <arg name="ipv4_src">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="scalable_any&amp;scalable_passive&amp;!rss_scalable_active_passive" key="ON-13560">
          <result value="PASSED">
            <verdict>IUT sent IPv4 packet</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_dst">TRUE</arg>
        <arg name="ipv4_src">FALSE</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="ipvlan&amp;netns_iut" key="ST-2184">
          <result value="PASSED">
            <verdict>ICMP message is expected but none was received</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_dst">TRUE</arg>
        <arg name="ipv4_src">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_dst">FALSE</arg>
        <arg name="ipv4_src"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="ipv4_mapped_connect_ipv6" type="script">
      <objective>Check that if IPv6 socket is bound to IPv4-mapped address, it cannot connect to normal IPv6 address, and vice versa.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_iut">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="v6only"/>
        <arg name="v6only_after"/>
        <notes/>
        <results tags="el=7" key="ST-1606" notes="RHEL7/CentOS7 specific">
          <result value="FAILED">
            <verdict>connect() succeeded unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_iut">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="v6only"/>
        <arg name="v6only_after"/>
        <notes/>
        <results tags="el=7" key="ST-1606" notes="RHEL7/CentOS7 specific">
          <result value="FAILED">
            <verdict>connect() failed with unexpected errno RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_iut">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="v6only"/>
        <arg name="v6only_after"/>
        <notes/>
      </iter>
    </test>
    <test name="send_connect_zero_addr" type="script">
      <objective>Check behaviour when sending to all-zeros destination address</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="use_connect"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Connect() succeeded unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="use_connect"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Connect() succeeded unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="use_connect"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Recv() succeeded unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="use_connect"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>Recv() succeeded unexpectedly</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sock_type"/>
        <arg name="use_connect"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="sock_type"/>
        <arg name="use_connect"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sock_type"/>
        <arg name="use_connect"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="sock_type"/>
        <arg name="use_connect"/>
        <notes/>
      </iter>
    </test>
    <test name="protected_signal" type="script">
      <objective>Check that a correct error is returned when setting the protected signal handler</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_sig"/>
        <notes/>
      </iter>
    </test>
    <test name="file_max_overflow" type="script">
      <objective>Check what happens when it is attempted to create more FDs than /proc/sys/fs/file-max allows.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">epoll</arg>
        <arg name="other_user">TRUE</arg>
        <notes/>
        <results tags="v5&amp;!socket_cache" key="ON-13243">
          <result value="PASSED"/>
          <result value="PASSED">
            <verdict>epoll_create() failed with error RPC-ENFILE</verdict>
          </result>
          <result value="FAILED">
            <verdict>epoll_create() failed with error RPC-ENFILE</verdict>
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
        <results tags="!v5|v5&amp;socket_cache">
          <result value="PASSED">
            <verdict>epoll_create() failed with error RPC-ENFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">epoll</arg>
        <arg name="other_user">FALSE</arg>
        <notes/>
        <results tags="v5&amp;!socket_cache" key="ON-13243">
          <result value="PASSED"/>
          <result value="PASSED">
            <verdict>epoll_create() failed with error RPC-EMFILE</verdict>
          </result>
          <result value="FAILED">
            <verdict>epoll_create() failed with error RPC-EMFILE</verdict>
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
        <results tags="v5&amp;socket_cache" key="ON-13243">
          <result value="PASSED">
            <verdict>epoll_create() failed with error RPC-EMFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">pipe</arg>
        <arg name="other_user">TRUE</arg>
        <notes/>
        <results tags="linux|v5">
          <result value="PASSED">
            <verdict>pipe() failed with error RPC-ENFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">pipe</arg>
        <arg name="other_user">FALSE</arg>
        <notes/>
        <results tags="v5&amp;socket_cache" key="ON-13243">
          <result value="PASSED"/>
          <result value="PASSED">
            <verdict>pipe() failed with error RPC-EMFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">udp</arg>
        <arg name="other_user">FALSE</arg>
        <notes/>
        <results tags="v5&amp;socket_cache" key="ON-13243">
          <result value="PASSED"/>
          <result value="PASSED">
            <verdict>socket() failed with error RPC-EMFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">tcp_passive</arg>
        <arg name="other_user">TRUE</arg>
        <notes/>
        <results tags="linux|v5">
          <result value="PASSED">
            <verdict>accept() failed with error RPC-ENFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">tcp_passive</arg>
        <arg name="other_user">FALSE</arg>
        <notes/>
        <results tags="v5&amp;socket_cache" key="ON-13243">
          <result value="PASSED"/>
          <result value="PASSED">
            <verdict>accept() failed with error RPC-EMFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">tcp</arg>
        <arg name="other_user">TRUE</arg>
        <notes/>
        <results tags="linux|v5">
          <result value="PASSED">
            <verdict>socket() failed with error RPC-ENFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">udp</arg>
        <arg name="other_user">TRUE</arg>
        <notes/>
        <results tags="linux|v5">
          <result value="PASSED">
            <verdict>socket() failed with error RPC-ENFILE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="fd_type">tcp</arg>
        <arg name="other_user">FALSE</arg>
        <notes/>
      </iter>
    </test>
    <test name="chk_too_big_len" type="script">
      <objective>Check that _chk() functions abort the program when passed length argument is too big.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <arg name="func"/>
        <notes/>
      </iter>
    </test>
  </iter>
</test>
