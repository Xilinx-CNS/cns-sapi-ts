<?xml version="1.0" encoding="UTF-8"?>
<!-- SPDX-License-Identifier: Apache-2.0 -->
<!-- (c) Copyright 2004 - 2022 Xilinx, Inc. All rights reserved. -->
<test name="basic" type="package">
  <objective>Advanced usage of basic Socket API</objective>
  <notes/>
  <iter result="PASSED">
    <notes/>
    <test name="get_sock_peer_name_dgm" type="script">
      <objective>Check getsockname()/getpeername() behaviour if socket is in different states.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="get_sock_peer_name_str" type="script">
      <objective>Check getsockname()/getpeername() behaviour if socket is in different states.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="state_trans_client" type="script">
      <objective>Check legal socket state transitions for TCP client stream socket</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="state_trans_server" type="script">
      <objective>Check legal socket state transitions for server-oriented socket and behaviour of system calls in attempts for inappropriate usage.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="state_trans_udp" type="script">
      <objective>Check legal socket state transitions for datagram socket</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="threads_client" type="script">
      <objective>Check that same stream client socket may be accessed from different threads and action in any thread changes the state of socket for other thread.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="threads_server" type="script">
      <objective>Check that the same stream server socket may be accessed from different threads and action in any thread changes state of socket for other thread.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="threads_dgm" type="script">
      <objective>Check that same datagram socket may be accessed from different threads and an action in any thread changes the state of socket for other thread.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="threads_shutdown_unblock" type="script">
      <objective>Check the behavior in the case if shutdown() is called on the socket that is shared between several threads and that action in any thread changes the socket state for other thread.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">recv</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED">
            <verdict>Send function returned -1, but: errno is set to ECANCELED instead of EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED">
            <verdict>Send function returned -1, but: errno is set to ECANCELED instead of EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED">
            <verdict>Send function returned -1, but: errno is set to EINPROGRESS instead of EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">send</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED">
            <verdict>Send function returned -1, but: errno is set to EINPROGRESS instead of EPIPE</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_read_suspend</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED">
            <verdict>send/recv function has not been unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">recv</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">send</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">aio_read_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RD</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_WR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED">
            <verdict>send/recv function has not been unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func_thread2">aio_write_suspend</arg>
        <arg name="func_thread3">aio_write_suspend</arg>
        <arg name="howto">SHUT_RDWR</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED">
            <verdict>send/recv function has not been unblocked</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="threads_shutdown_diff_sock" type="script">
      <objective>Check that shutdown() on socket will not take too long time when two other threads or processes call the same function for two other sockets in blocking mode</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="other_func"/>
        <arg name="shutdown_how"/>
        <arg name="sock_type"/>
        <arg name="use_threads"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sendrecv_func"/>
        <arg name="shutdown_how"/>
        <arg name="sock_type"/>
        <arg name="use_threads"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="iomux_func"/>
        <arg name="shutdown_how"/>
        <arg name="sock_type"/>
        <arg name="use_threads"/>
        <notes/>
      </iter>
    </test>
    <test name="close_created" type="script">
      <objective>Check that just created socket can be successfully closed.</objective>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="close_bound" type="script">
      <objective>Check that bound socket can be successfully closed.</objective>
      <iter result="PASSED">
        <arg name="sock_type"/>
        <arg name="env"/>
        <arg name="port_wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="close_listening" type="script">
      <objective>Check that listening socket can be successfully closed.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="close_listen_pending" type="script">
      <objective>Check that listening socket with pending connections can be successfully closed.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="accept"/>
        <arg name="send_data"/>
        <notes/>
      </iter>
    </test>
    <test name="shutdown_stream_read_write" type="script">
      <objective>Check shutdown of stream socket in connected state in sequence SHUT_RD, then SHUT_WR.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="shutdown_dgm_rd" type="script">
      <objective>Check shutdown of datagram socket in connected state in sequence SHUT_RD, then SHUT_WR.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="shutdown_dgm_wr" type="script">
      <objective>Check shutdown of datagram socket in connected state in sequence SHUT_WR, then SHUT_RD.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="shutdown_dgm_all" type="script">
      <objective>Check simultaneous read/write shutdown of datagram socket in connected state.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="shutdown_peer" type="script">
      <objective>Check behaviour of TCP connected socket when shutdown was performed on the other side of connection.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="bind_sockaddr_send" type="script">
      <objective>Check that bind() correctly sets parameters passed in address argument and these parameters rule send processing.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8570">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8570">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8570">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet:loopback,addr:'tst_addr':inet:loopback}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet:loopback,addr:'tst_addr':inet:loopback}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet:wildcard,addr:'tst_addr':inet:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet:unicast,addr:'tst_addr':inet:wildcard}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet:broadcast,addr:'tst_addr':inet:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:broadcast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8570">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8570">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8570">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:loopback,addr:'tst_addr':inet6:loopback}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},IUT{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:loopback,addr:'tst_addr':inet6:loopback}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:wildcard,addr:'tst_addr':inet6:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:unicast,addr:'tst_addr':inet6:wildcard}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:broadcast,addr:'tst_addr':inet6:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:broadcast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}}</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="bind_sockaddr_recv" type="script">
      <objective>Check that bind() correctly sets parameters passed in address argument and these parameters rule receive processing.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">TRUE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim" notes="Shim does not know TCP port after bind() but before connect() or listen()">
          <result value="FAILED">
            <verdict>Undefined port in socket after bind</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8558">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{'H1'{addr:'dst_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},tester{'H1'{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast}}</arg>
        <arg name="iut_user">FALSE</arg>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5&amp;(scalable_active|scalable_passive)" key="ON-5842,ON-8558">
          <result value="FAILED"/>
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">undef</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">user</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:wildcard,addr:'iut_addr_ucast':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:wildcard,addr:'iut_addr_ucast':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr_ucast'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type">system</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet:unicast,addr:'tst_addr':inet:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:unicast,addr:'tst_addr':inet6:unicast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet:broadcast,addr:'tst_addr':inet:broadcast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:broadcast},{{'pco_tst':tester},addr:'tst_addr':inet:broadcast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:broadcast,addr:'tst_addr':inet6:broadcast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:broadcast},{{'pco_tst':tester},addr:'tst_addr':inet6:broadcast}},'dst_addr'='iut_addr'</arg>
        <arg name="iut_user"/>
        <arg name="port_type"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="bind_reuse" type="script">
      <objective>Check bind() behaviour at attempt to bind to already used port.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="udp_connect" type="script">
      <objective>Check correct behaviour of Socket API in case of multiple calls of connect method for UDP socket.</objective>
      <notes>The test fails on Linux 2.4.20 and passes on 2.4.27 and 2.6.</notes>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="default_bind_connect" type="script">
      <objective>Check that connect call for non-bound socket performs bind() for it automatically to system-chosen unused port and appropriate IP address.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="default_bind_listen" type="script">
      <objective>Check that listen call for stream nonnamed socket implicitly performs bind() for it automatically to system-chosen unused port.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="default_bind_sendto" type="script">
      <objective>Check that sendto() call on non-bound datagram socket performs bind() for it automatically to system-chosen unused port and wildcard address.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
        <results tags="zf_shim" notes="ZF shim uses host IP for implicit bind()">
          <result value="PASSED">
            <verdict>Address returned by getsockname() is not wildcard</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="rst_before_accept" type="script">
      <objective>Check accept() behaviour if an RST for ESTABLISHED connection have been gotten.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <notes/>
        <results tags="v5&amp;ool_loop=4" key="ON-1664">
          <result value="PASSED"/>
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <notes/>
        <results tags="v5&amp;ool_loop=4" key="ON-1664">
          <result value="PASSED"/>
          <result value="FAILED"/>
        </results>
      </iter>
    </test>
    <test name="connect_interrupted" type="script">
      <objective>Check that the socket after interrupted TCP connect() (by the signal, non-blocking socket or SO_SNDTIMEO on the socket): marks as used local-remote address-port, ignores address parameter in further connect() calls, blocks send/receive operations before connection establishment, blocks further connect() calls and return 0 in the case of success.</objective>
      <notes>Unstable on Linux &lt;2.6.17 because of race condition. See Linux 6233, OL 648.</notes>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux">epoll</arg>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux">epoll_pwait</arg>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse">TRUE</arg>
        <arg name="iomux"/>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Another socket has initiated the same connection, connect() of this one failed with errno EADDRNOTAVAIL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer">FALSE</arg>
        <arg name="env"/>
        <arg name="failures">1</arg>
        <arg name="howto"/>
        <arg name="inuse">FALSE</arg>
        <arg name="iomux">none</arg>
        <arg name="recv_check">false</arg>
        <arg name="send_check">false</arg>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check">false</arg>
        <arg name="send_check">inline</arg>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check">false</arg>
        <arg name="send_check">thread</arg>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check">false</arg>
        <arg name="send_check">fork</arg>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check">inline</arg>
        <arg name="send_check"/>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check">thread</arg>
        <arg name="send_check"/>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check">fork</arg>
        <arg name="send_check"/>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures">3</arg>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer">TRUE</arg>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success">during</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success">before</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux">select</arg>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux">pselect</arg>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux">poll</arg>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux">ppoll</arg>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="another_peer"/>
        <arg name="env"/>
        <arg name="failures"/>
        <arg name="howto"/>
        <arg name="inuse"/>
        <arg name="iomux"/>
        <arg name="recv_check"/>
        <arg name="send_check"/>
        <arg name="success">never</arg>
        <notes/>
      </iter>
    </test>
    <test name="connect_after_fault" type="script">
      <objective>Check behaviour of connect() on TCP socket if server is unreachable.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <notes/>
      </iter>
    </test>
    <test name="connections_on_aliases" type="script">
      <objective>Check a possibility of creation of the several connections on separate addresses (aliases) of the same network interface and correct network interaction.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="diff_port">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="diff_port">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="diff_port">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="diff_port">FALSE</arg>
        <notes/>
      </iter>
    </test>
    <test name="fork_created" type="script">
      <objective>Check that created socket is inherited to the both processes during fork() call and legal state transitions in one process are detected in another.</objective>
      <iter result="PASSED">
        <arg name="act_child"/>
        <arg name="env"/>
        <arg name="sock_type"/>
        <arg name="method"/>
        <notes/>
      </iter>
    </test>
    <test name="fork_bound" type="script">
      <objective>Check that bound socket is inherited to the both processes during fork call and close() socket in one process remains it alive in another.</objective>
      <iter result="PASSED">
        <arg name="act_child"/>
        <arg name="env"/>
        <arg name="sock_type"/>
        <arg name="method"/>
        <notes/>
      </iter>
    </test>
    <test name="fork_conn_dgm" type="script">
      <objective>Check that socket is inherited to the both processes during fork call, that data received and transmitted correctly and legal state transitions in one process are detected in another.</objective>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">inherit_no_net_init</arg>
        <notes/>
      </iter>
    </test>
    <test name="fork_conn_str" type="script">
      <objective>Check that socket is inherited to the both processes during fork call and traffic passed correctly in both directions.</objective>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="act_child">FALSE</arg>
        <arg name="env"/>
        <arg name="method">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="act_child">TRUE</arg>
        <arg name="env"/>
        <arg name="method">inherit_no_net_init</arg>
        <notes/>
      </iter>
    </test>
    <test name="fork_listening" type="script">
      <objective>Check that TCP listening server socket is inherited to the both processes during @ref lib-create_child_process_socket call and connection establishing operations works correctly.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="act_child"/>
        <arg name="env"/>
        <arg name="method"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="exec_created" type="script">
      <objective>Check that created socket is inherited during execve() call.</objective>
      <iter result="PASSED">
        <arg name="domain"/>
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="exec_bound" type="script">
      <objective>Check that bound socket is inherited during exec() call and has same state.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="exec_conn" type="script">
      <objective>Check that connected socket is inherited during execve() call, that data received and transmitted correctly.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
    </test>
    <test name="exec_listening" type="script">
      <objective>Check that TCP listening server socket is inherited during execve() call and connection establishing operations works correctly.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="exec_fork_multiple" type="script">
      <objective>Check that connected socket is inherited during multiple exec() and fork()/exec() calls that data received and transmitted correctly.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">inherit</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateSocket</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateHandle</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateSocket_self</arg>
        <notes/>
      </iter>
      <iter result="FAILED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">inherit_no_net_init</arg>
        <arg name="method2">DuplicateHandle_self</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateSocket_self</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method1">DuplicateHandle_self</arg>
        <arg name="method2">inherit_no_net_init</arg>
        <notes/>
      </iter>
    </test>
    <test name="exec_fork_multithread" type="script">
      <objective>Check affecting of the fork()/exec() operations to be performed in one executing thread on socket operations blocked in other one.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="method"/>
        <notes/>
      </iter>
    </test>
    <test name="exec_fork_traffic" type="script">
      <objective>Check robustness of the implemetation if fork()/exec() operations are performing when the traffic exists through established TCP connection</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="exec_dup" type="script">
      <objective>Check that dup'ed socket is correctly handled by exec().</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="socket_peer_rst" type="script">
      <objective>Check that peer returns RST TCP segment while close() own socket, if nothing has been read from received buffer having some data.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="tcp_server_reboot" type="script">
      <objective>Check that TCP server after reboot sends RST segment on arrival TCP segment belong to the old connection (established before reboot).</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="wildcard_server_passive_opening" type="script">
      <objective>Check that wildcard server establishes connections on separate addresses according to remote peer requests.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="tcp_server_crashes_timeout" type="script">
      <objective>Check that TCP client returns with timeout if TCP server crashes and there was not other notifaication about TCP server crashe.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="connect_influence_sendto" type="script">
      <objective>Check a possibility of data delivery by means of sendto() on  SOCKET_DGRAM type socket if  connect() has been applied.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="to">another</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Sending to connected socket to different destination address sent data to specified (a new) destination</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="to">same_addr</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Sending to connected socket to the same network address the socket connected to but different port sent data to specified (a new) destination</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="to">same_port</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Sending to connected socket to the same port the socket connected to but different network address sent data to specified (a new) destination</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst1_addr':inet:unicast}},'tst2_addr'='tst1_addr'</arg>
        <arg name="to"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">IUT{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst1_addr':inet6:unicast}},'tst2_addr'='tst1_addr'</arg>
        <arg name="to"/>
        <notes/>
      </iter>
    </test>
    <test name="data_before_accept" type="script">
      <objective>Check that data sent before TCP connection was accepted by TCP server can be successfully obtained.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="before_accept">data</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept">close</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!reuse_stack&amp;(ool_loop=2|ool_loop=4)" key="ON-1664">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept">both</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!reuse_stack&amp;(ool_loop=2|ool_loop=4)" key="ON-1664">
          <result value="FAILED">
            <verdict>Receive function failed with errno RPC-ECONNRESET</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept">data</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept">close</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!reuse_stack&amp;(ool_loop=2|ool_loop=4)" key="ON-1664">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept">both</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;!reuse_stack&amp;(ool_loop=2|ool_loop=4)" key="ON-1664">
          <result value="FAILED">
            <verdict>Receive function failed with errno RPC-ECONNRESET</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="before_accept"/>
        <arg name="env"/>
        <arg name="func">aio_read</arg>
        <notes/>
        <results tags="linux&amp;v5" key="AIO STREAM">
          <result value="FAILED"/>
        </results>
      </iter>
    </test>
    <test name="dgram_bind_connect_addr" type="script">
      <objective>Check  connect() behavior on socket of  SOCK_DGRAM type after  bind() with following combinations: - local address - INADDR_ANY, loopback, unicast; - local port - 0, any valid port; - destination address - INADDR_ANY, loopback, unicast local, unicast peer; - destination port - 0, any valid port.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_lo</arg>
        <arg name="local_addr">loopback</arg>
        <arg name="local_port"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() to the foreign host should return -1 instead of 0, because socket bound to the 'loopback'</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_ipv6</arg>
        <arg name="local_addr">loopback</arg>
        <arg name="local_port"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() to the foreign host should return -1 instead of 0, because socket bound to the 'loopback'</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_lo_ipv6</arg>
        <arg name="local_addr">loopback</arg>
        <arg name="local_port"/>
        <notes/>
        <results tags="linux">
          <result value="FAILED">
            <verdict>connect() to the foreign host should return -1 instead of 0, because socket bound to the 'loopback'</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_lo</arg>
        <arg name="local_addr">local</arg>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_lo</arg>
        <arg name="local_addr">any</arg>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_ipv6</arg>
        <arg name="local_addr">local</arg>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_ipv6</arg>
        <arg name="local_addr">any</arg>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_lo_ipv6</arg>
        <arg name="local_addr">local</arg>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr_lo_ipv6</arg>
        <arg name="local_addr">any</arg>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">remote</arg>
        <arg name="dst_port"/>
        <arg name="env">VAR.env.peer2peer_2addr</arg>
        <arg name="local_addr"/>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">local</arg>
        <arg name="dst_port"/>
        <arg name="env"/>
        <arg name="local_addr"/>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">loopback</arg>
        <arg name="dst_port"/>
        <arg name="env"/>
        <arg name="local_addr"/>
        <arg name="local_port"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="dst_addr">any</arg>
        <arg name="dst_port"/>
        <arg name="env"/>
        <arg name="local_addr"/>
        <arg name="local_port"/>
        <notes/>
      </iter>
    </test>
    <test name="dgram_crd_unbound" type="script">
      <objective>Connect/reconnect/disconnect UDP socket and check  getsockname()/getpeername() output.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.two_nets.iut_both</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.two_nets.iut_first</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.two_nets.iut_second</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.two_nets.iut_both_ipv6</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.two_nets.iut_first_ipv6</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.two_nets.iut_second_ipv6</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED"/>
        </results>
      </iter>
    </test>
    <test name="dgram_crd_bound_lb" type="script">
      <objective>Connect/reconnect/disconnect UDP socket bound to loopback address and check  getsockname()/getpeername() output.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Successfully reconnected to tst_addr</verdict>
            <verdict>Disconnect resets local port to zero</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Successfully reconnected to tst_addr</verdict>
            <verdict>Disconnect resets local port to zero</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Disconnect resets local port to zero</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Disconnect resets local port to zero</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="dgram_crd_bound_wc" type="script">
      <objective>Connect/reconnect/disconnect UDP socket bound to wildcard address and check  getsockname()/getpeername() output.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Reconnect to the peer from another subnet does not change socket local address</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="dgram_bind_connect_names" type="script">
      <objective>Bind UDP socket to loopback address and try to connect to unicast address</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'localhost':inet6:loopback},{{'pco_tst':tester}, addr:'remote':inet6:unicast}}</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>datagram socket is bound to loopback, but connect() to non-local address returns OK</verdict>
            <verdict>getpeername() succeeded</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'localhost':inet:loopback},{{'pco_tst':tester}, addr:'remote':inet:unicast}}</arg>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>connect() to remote address of the socket bound to localhost address failed with errno EINVAL</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="listen_shutdown_pending" type="script">
      <objective>Check that server host transmit RST TCP segment to the client if connection is incomplete one and listening socket is shutdowned on read.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="listen_shutdown_listen" type="script">
      <objective>Check a possibility to repair the socket to the listening state after shutdowning in the case with/without of complete connection on the server.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="reuseaddr">FALSE</arg>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" key="ON-38">
          <result value="FAILED">
            <verdict>SO_REUSEADDR socket option is not set on a listening socket before accept of a connection, however attempt to restart listening after shutdown returned 0 instead of -1 with EADDRINUSE errno</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="reuseaddr">FALSE</arg>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5&amp;!(ool_loop=0)" key="ON-38">
          <result value="FAILED">
            <verdict>SO_REUSEADDR socket option is not set on a listening socket before accept of a connection, however attempt to restart listening after shutdown returned 0 instead of -1 with EADDRINUSE errno</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">FALSE</arg>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports&amp;(!(ool_loop=0)|laddr_all)" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">FALSE</arg>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports&amp;(!(ool_loop=0)|laddr_all)" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">FALSE</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;(!(ool_loop=0)|laddr_all|(scalable_any&amp;scalable_passive&amp;!rss_scalable_active_passive))" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">FALSE</arg>
        <notes/>
        <results tags="linux&amp;v5&amp;(!(ool_loop=0)|laddr_all|(scalable_any&amp;scalable_passive&amp;!rss_scalable_active_passive))" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="reuseaddr">FALSE</arg>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-38">
          <result value="FAILED">
            <verdict>SO_REUSEADDR socket option is not set on a listening socket before accept of a connection, however attempt to restart listening after shutdown returned 0 instead of -1 with EADDRINUSE errno</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="reuseaddr">FALSE</arg>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-38">
          <result value="FAILED">
            <verdict>SO_REUSEADDR socket option is not set on a listening socket before accept of a connection, however attempt to restart listening after shutdown returned 0 instead of -1 with EADDRINUSE errno</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">TRUE</arg>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">TRUE</arg>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound to unspecified port unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="reuseaddr">FALSE</arg>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="reuseaddr">FALSE</arg>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection"/>
        <arg name="env"/>
        <arg name="reuseaddr">TRUE</arg>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown"/>
        <arg name="bind_before_listen">specified</arg>
        <arg name="connection">FALSE</arg>
        <arg name="env"/>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">specified</arg>
        <arg name="bind_before_listen">no</arg>
        <arg name="connection"/>
        <arg name="env"/>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">specified</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env"/>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">unspecified</arg>
        <arg name="bind_before_listen">no</arg>
        <arg name="connection"/>
        <arg name="env"/>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="v5&amp;ool_tcp_shared_ports" key="ON-7303">
          <result value="FAILED">
            <verdict>bind() after shutdown() of listening socket bound implicitly unexpectedly failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">TRUE</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before">TRUE</arg>
        <notes/>
        <results tags="linux&amp;v5" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">unspecified</arg>
        <arg name="connection"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_after_shutdown">no</arg>
        <arg name="bind_before_listen">no</arg>
        <arg name="connection"/>
        <arg name="env"/>
        <arg name="reuseaddr"/>
        <arg name="use_wildcard_after"/>
        <arg name="use_wildcard_before"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-6554">
          <result value="FAILED">
            <verdict>The second implicit bind() to unspecified port did not changed used port</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="two_accept_blocked" type="script">
      <objective>Check a possibility to retrieve new connections by means of accept() blocked in different child processes on the same server socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="do_fork"/>
        <arg name="method"/>
        <notes/>
      </iter>
    </test>
    <test name="close_on_exec" type="script">
      <objective>Check that fcntl(), socket() and accept4() can handle close-on-exec flag and exec() operates in accordance with this flag.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="close_on_exec"/>
        <arg name="env"/>
        <arg name="func">accept4</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="PASSED"/>
        </results>
        <results tags="linux-2.6&lt;27">
          <result value="FAILED">
            <verdict>Failed to find accept4 on pco_iut</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec">TRUE</arg>
        <arg name="env"/>
        <arg name="func">socket</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5">
          <result value="PASSED"/>
        </results>
        <results tags="linux-2.6&lt;27">
          <result value="FAILED">
            <verdict>Call socket() with SOCK_CLOEXEC flag(s) failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec">TRUE</arg>
        <arg name="use_dup3"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="sock_type"/>
        <arg name="use_fdup">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec">FALSE</arg>
        <arg name="use_dup3"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="sock_type"/>
        <arg name="use_fdup"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec">FALSE</arg>
        <arg name="env"/>
        <arg name="func">socket</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="sock_type"/>
        <arg name="use_dup3"/>
        <arg name="use_fdup">TRUE</arg>
        <notes/>
        <results tags="linux-2.6&lt;24">
          <result value="FAILED">
            <verdict>fcntl(F_DUPFD_CLOEXEC) call failed</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="derived_bind" type="script">
      <objective>Check that bind() and other connection establishing operations works correctly on sockets instances, obtained by exec(), fork(), dup().</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="command"/>
        <arg name="double_acts"/>
        <arg name="env"/>
        <arg name="method"/>
        <arg name="sock_type"/>
        <arg name="use_wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="derived_bindtodevice" type="script">
      <objective>Check that bindtodevice() and further connection establishing operations works correctly on sockets instances, obtained by exec(), fork(), dup().</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="command"/>
        <arg name="double_acts"/>
        <arg name="env"/>
        <arg name="listen_state"/>
        <arg name="method"/>
        <arg name="sock_type"/>
        <arg name="use_wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="derived_connect" type="script">
      <objective>Check that connect() and other connection establishing operations works correctly on sockets instances, obtained by exec(), fork(), dup().</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="command"/>
        <arg name="double_acts"/>
        <arg name="env"/>
        <arg name="method"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="accept_order" type="script">
      <objective>Check that accept() returns connections in the same order as they appeared.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst','pco_cli2'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst1':tester},addr:'iut_addr':inet:unicast},{{'pco_tst2':tester},addr:'tst_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli2'='pco_tst1','pco_cli1'='pco_tst2','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli2'='pco_iut2','pco_cli1'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst1':tester},{'pco_tst2':tester},addr:'iut_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst1','pco_cli2'='pco_tst2','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},{'pco_tst':tester},addr:'iut_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_iut2','pco_cli2'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},{'pco_iut3':IUT},addr:'iut_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_iut2','pco_cli2'='pco_iut3','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst1':tester},addr:'iut_addr':inet:unicast},{{'pco_tst2':tester},addr:'tst_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst1','pco_cli2'='pco_tst2','srv_addr'='iut_addr'</arg>
        <notes/>
        <results tags="v5" key="OLDSW2V0-221" notes="V5 checks own accept queue and, then, accept queue of the OS socket. Therefore, connections via L5 socket are always accepted first.">
          <result value="FAILED">
            <verdict>The 1st accept() returned address of 2nd client</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},addr:'iut_addr':inet:unicast},{{'pco_tst':tester},addr:'tst_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_iut2','pco_cli2'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
        <results tags="v5" key="OLDSW2V0-221" notes="V5 checks own accept queue and, then, accept queue of the OS socket. Therefore, connections via L5 socket are always accepted first.">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>The 1st accept() returned address of 2nd client</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},{'pco_iut2':IUT},addr:'iut_addr':inet:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst','pco_cli2'='pco_iut2','srv_addr'='iut_addr'</arg>
        <notes/>
        <results tags="v5" key="OLDSW2V0-221" notes="V5 checks own accept queue and, then, accept queue of the OS socket. Therefore, connections via L5 socket are always accepted first.">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>The 1st accept() returned address of 2nd client</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst','pco_cli2'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst1':tester},addr:'iut_addr':inet6:unicast},{{'pco_tst2':tester},addr:'tst_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli2'='pco_tst1','pco_cli1'='pco_tst2','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli2'='pco_iut2','pco_cli1'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst1':tester},{'pco_tst2':tester},addr:'iut_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst1','pco_cli2'='pco_tst2','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},{'pco_tst':tester},addr:'iut_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_iut2','pco_cli2'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},{'pco_iut3':IUT},addr:'iut_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_iut2','pco_cli2'='pco_iut3','srv_addr'='iut_addr'</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst1':tester},addr:'iut_addr':inet6:unicast},{{'pco_tst2':tester},addr:'tst_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst1','pco_cli2'='pco_tst2','srv_addr'='iut_addr'</arg>
        <notes/>
        <results tags="v5" key="OLDSW2V0-221" notes="V5 checks own accept queue and, then, accept queue of the OS socket. Therefore, connections via L5 socket are always accepted first.">
          <result value="FAILED">
            <verdict>The 1st accept() returned address of 2nd client</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_iut2':IUT},addr:'iut_addr':inet6:unicast},{{'pco_tst':tester},addr:'tst_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_iut2','pco_cli2'='pco_tst','srv_addr'='iut_addr'</arg>
        <notes/>
        <results tags="v5" key="OLDSW2V0-221" notes="V5 checks own accept queue and, then, accept queue of the OS socket. Therefore, connections via L5 socket are always accepted first.">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>The 1st accept() returned address of 2nd client</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT},{'pco_tst':tester},{'pco_iut2':IUT},addr:'iut_addr':inet6:unicast}},'pco_srv'='pco_iut','pco_cli1'='pco_tst','pco_cli2'='pco_iut2','srv_addr'='iut_addr'</arg>
        <notes/>
        <results tags="v5" key="OLDSW2V0-221" notes="V5 checks own accept queue and, then, accept queue of the OS socket. Therefore, connections via L5 socket are always accepted first.">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>The 1st accept() returned address of 2nd client</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="listen_shutdown_connect" type="script">
      <objective>Check that connect() works correclty after shutdown on listening socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="bind">no</arg>
        <arg name="use_wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="bind">unspecified</arg>
        <arg name="use_wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="bind">specified</arg>
        <arg name="use_wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="connect_failed_func" type="script">
      <objective>Check that listen(), bind(), getsockname() and getpeername() work correctly when it is called after failed connect.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="bind"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="howto"/>
        <notes/>
      </iter>
    </test>
    <test name="fork_kill" type="script">
      <objective>Check that connection may be used after parent finishing/killing.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">inherit</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">inherit</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">DuplicateSocket</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">DuplicateSocket</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">DuplicateHandle</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">DuplicateHandle</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">inherit</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">inherit</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">DuplicateSocket</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">DuplicateSocket</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">DuplicateHandle</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">DuplicateHandle</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">inherit_no_net_init</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="method">inherit_no_net_init</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">inherit_no_net_init</arg>
        <arg name="kill">FALSE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="method">inherit_no_net_init</arg>
        <arg name="kill">TRUE</arg>
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="shutdown_write_read" type="script">
      <objective>Check shutdown on socket in connected state in sequence SHUT_WR, then SHUT_RD.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim">
          <result value="FAILED">
            <verdict>Wrong socket state after shutdown(WR) #2, got STATE_SHUT_RDWR; expected STATE_BOUND</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim">
          <result value="FAILED">
            <verdict>Wrong socket state after shutdown(WR) #1, got STATE_SHUT_RDWR; expected STATE_BOUND</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="shut_peer">second</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim">
          <result value="FAILED">
            <verdict>Wrong socket state after shutdown(WR) #2, got STATE_SHUT_RDWR; expected STATE_BOUND</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="zf_shim">
          <result value="FAILED">
            <verdict>Wrong socket state after shutdown(WR) #1, got STATE_SHUT_RDWR; expected STATE_BOUND</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="shut_peer">first</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="shut_peer">never</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="listen_backlog_values" type="script">
      <objective>Investigate treatment of listen() function backlog parameter.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="backlog"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <notes/>
        <results tags="linux" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=2|ool_loop=3)" key="ON-4312">
          <result value="FAILED">
            <verdict>Measured backlog is more than expected</verdict>
          </result>
        </results>
        <results tags="v5&amp;ool_loop=4&amp;!reuse_stack" key="ON-8297" notes="Verdict about ECONNRESET is expected after fixing SF bug 75246">
          <result value="FAILED">
            <verdict>Measuring backlog: recv() failed with errno RPC-ECONNRESET</verdict>
            <verdict>Measured backlog is more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <notes/>
        <results tags="linux" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
        <results tags="v5&amp;(ool_loop=2|ool_loop=3)" key="ON-4312">
          <result value="FAILED">
            <verdict>Measured backlog is more than expected</verdict>
          </result>
        </results>
        <results tags="v5&amp;ool_loop=4&amp;!reuse_stack" key="ON-8297" notes="Verdict about ECONNRESET is expected after fixing ON-8304">
          <result value="FAILED">
            <verdict>Measuring backlog: recv() failed with errno RPC-ECONNRESET</verdict>
            <verdict>Measured backlog is more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">1</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">10</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">150</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">1</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">10</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">150</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">0</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
        <results tags="linux" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <notes/>
        <results tags="linux" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">0</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
        <results tags="linux" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <notes/>
        <results tags="linux" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">-1</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="backlog">-1</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <notes/>
        <results tags="linux&amp;!v5" notes="Default Linux behavior">
          <result value="FAILED">
            <verdict>Measured backlog is a bit more than expected</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="listen_shutdown_wr" type="script">
      <objective>Check that listening socket doesn't drop accept queue and continues to accept connection after shutdown.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="listen_accept_close" type="script">
      <objective>Check listening socket stops to accept connections after close().</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="handover"/>
        <arg name="one_tst"/>
        <notes/>
      </iter>
    </test>
    <test name="fork_nb_receive" type="script">
      <objective>Check that fork() can be performed simultaniously with intensive non-block receive operations on empty socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="iterations">5</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="iterations">5</arg>
        <notes/>
      </iter>
    </test>
    <test name="bind_two_nets" type="script">
      <objective>Check that bind and send/sendto/sendmsg functions correctly handles the situation when there are two nets on one link, socket is bound to the address from one net and send operation is performed to the address from another net.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>onload_zc_send_user_buf() failed with unexpected error RPC-EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>onload_zc_send() failed with unexpected error RPC-EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendto</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmsg</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sendmmsg</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">getpeername</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_close_on_exec" type="script">
      <objective>Check that fcntl() and pipe2() can handle close-on-exec flag and exec() operates in accordance with this flag.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="close_on_exec">TRUE</arg>
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="test_read_end"/>
        <arg name="test_write_end"/>
        <arg name="use_fdup">TRUE</arg>
        <arg name="use_fork"/>
        <arg name="use_dup3"/>
        <notes/>
        <results tags="linux-2.6&lt;24">
          <result value="FAILED">
            <verdict>fcntl(F_DUPFD_CLOEXEC) call failed</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec">TRUE</arg>
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="test_read_end"/>
        <arg name="test_write_end"/>
        <arg name="use_fdup">FALSE</arg>
        <arg name="use_fork"/>
        <arg name="use_dup3"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec">FALSE</arg>
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="test_read_end"/>
        <arg name="test_write_end"/>
        <arg name="use_fdup"/>
        <arg name="use_fork"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="close_on_exec"/>
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="func">pipe2</arg>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="test_read_end"/>
        <arg name="test_write_end"/>
        <arg name="use_fork"/>
        <notes/>
        <results tags="linux-2.6&lt;27">
          <result value="FAILED">
            <verdict>Failed to find pipe2 on pco_iut</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="pipe_read_nonblock" type="script">
      <objective>Check that read() operation returns -1 with EAGAIN when called on empty non-blocking pipe.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="func">pipe2</arg>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
        <results tags="linux-2.6&lt;27">
          <result value="FAILED">
            <verdict>Failed to find pipe2() on pco_iut</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="func">fcntl</arg>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="func">ioctl</arg>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_write_nonblock" type="script">
      <objective>Check that write() operation returns -1 with EAGAIN when called on full non-blocking pipe.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="fionbio"/>
        <arg name="func">pipe2</arg>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
        <results tags="linux-2.6&lt;27">
          <result value="FAILED">
            <verdict>Failed to find pipe2() on pco_iut</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="fionbio"/>
        <arg name="func">fcntl</arg>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="fionbio"/>
        <arg name="func">ioctl</arg>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_write_block" type="script">
      <objective>Write operation on blocking pipes.</objective>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT,'pco_aux':IUT}}}</arg>
        <arg name="data_size">512</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">{{{'pco_iut':IUT,'pco_aux':IUT}}}</arg>
        <arg name="data_size">512</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <notes/>
      </iter>
    </test>
    <test name="pipe_big_buffer_read" type="script">
      <objective>Check that @p read() operation on pipe with buffer bigger than available data works correctly.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_read">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
    </test>
    <test name="pipe_big_buffer_write" type="script">
      <objective>Check that @p read() operation on pipe with buffer bigger than available data works correctly.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">1024</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="iovlen">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">FALSE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">FALSE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">8192</arg>
        <arg name="writer_child">TRUE</arg>
        <arg name="reader_child">TRUE</arg>
        <arg name="blocking_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="iovlen">3</arg>
        <notes/>
      </iter>
    </test>
    <test name="threads_shutdown_listening" type="script">
      <objective>Check the behavior in the case if shutdown() or close() being called on the listening socket that is shared between several threads while blocking on this socket in another thread.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="accept_before"/>
        <arg name="do_close"/>
        <arg name="env"/>
        <arg name="func"/>
        <notes/>
      </iter>
    </test>
    <test name="many_pipes" type="script">
      <objective>Check that writing and reading to different created pipes doen't corrupts the data in pipes.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="close_open_iter"/>
        <arg name="env"/>
        <arg name="pipes_num">7</arg>
        <arg name="pipes_to_close"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="close_open_iter"/>
        <arg name="env"/>
        <arg name="pipes_num">20</arg>
        <arg name="pipes_to_close"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <notes/>
        <results tags="v5&amp;ppc64" key="OL 8254">
          <result value="PASSED">
            <verdict>Creation of pipe number 15 failed: EFAULT</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="pipe_merge_buf" type="script">
      <objective>Check that data correctly merges then @b read() with big buffer called on the pipe with data written using several calls.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="write_num">5</arg>
        <arg name="add_bytes">0</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="write_num">5</arg>
        <arg name="add_bytes">512</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="write_num">5</arg>
        <arg name="add_bytes">0</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="write_num">5</arg>
        <arg name="add_bytes">512</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <notes/>
      </iter>
    </test>
    <test name="pipe_writev_readv" type="script">
      <objective>Check that writev()/ readv() operations correctly work with pipe.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="block_read"/>
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="half_empty"/>
        <arg name="kill_after_write"/>
        <arg name="reader_child"/>
        <arg name="write_before_fork"/>
        <arg name="writer_child"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_close_write" type="script">
      <objective>Check that @p write() function returns @c -1 and sets errno to @c EPIPE when it is called on pipe with closed read end.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">FALSE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">FALSE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">FALSE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="data_size">512</arg>
        <arg name="create_child">TRUE</arg>
        <arg name="from_child">TRUE</arg>
        <arg name="block_write">TRUE</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <arg name="sys_call">TRUE</arg>
        <notes/>
      </iter>
    </test>
    <test name="pipe_close_read" type="script">
      <objective>Check that read() function returns 0 when it is called on pipe with closed read end.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="add_pipe"/>
        <arg name="block_read"/>
        <arg name="create_child"/>
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="from_child"/>
        <arg name="kill_parent"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="sys_call"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_socket_interact" type="script">
      <objective>Check that creating and closing sockets and pipes do not cause any crashes.</objective>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="open_pipe1">2</arg>
        <arg name="open_sock1">10</arg>
        <arg name="open_pipe2">3</arg>
        <arg name="close_sock">2</arg>
        <arg name="close_pipe">1</arg>
        <arg name="open_sock2">1</arg>
        <arg name="open_pipe3">2</arg>
        <arg name="send_f">write</arg>
        <arg name="recv_f">read</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.iut_only</arg>
        <arg name="open_pipe1">2</arg>
        <arg name="open_sock1">10</arg>
        <arg name="open_pipe2">3</arg>
        <arg name="close_sock">2</arg>
        <arg name="close_pipe">1</arg>
        <arg name="open_sock2">1</arg>
        <arg name="open_pipe3">2</arg>
        <arg name="send_f">writev</arg>
        <arg name="recv_f">readv</arg>
        <notes/>
      </iter>
    </test>
    <test name="pipe_become_writable" type="script">
      <objective>Check that pipe become writable then more then page size bytes is read from the pipe after overfilling.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="data_size">8192</arg>
        <arg name="env"/>
        <arg name="reader_child"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="writer_child"/>
        <notes/>
        <results tags="v5&amp;ppc64" key="OL 8255">
          <result value="PASSED">
            <verdict>Pipe became writable too early.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_size">512</arg>
        <arg name="env"/>
        <arg name="reader_child"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="writer_child"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_size">1024</arg>
        <arg name="env"/>
        <arg name="reader_child"/>
        <arg name="recv_f"/>
        <arg name="send_f"/>
        <arg name="writer_child"/>
        <notes/>
      </iter>
    </test>
    <test name="stat_mode" type="script">
      <objective>Correctness of stat function calls on various objects, currenly st_mode is tested to check 'type' of the resource.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="is64"/>
        <arg name="object">epoll</arg>
        <arg name="domain"/>
        <notes/>
        <results tags="v5&amp;el&amp;linux-2.6.32">
          <result value="FAILED">
            <verdict>Wrong mode returned for epoll fd: 0x180</verdict>
          </result>
        </results>
        <results tags="v5&amp;el&amp;linux-2.6.32&amp;ool_epoll=0" key="ON-2323">
          <result value="FAILED">
            <verdict>Wrong mode returned for epoll fd: 0x8180</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="is64"/>
        <arg name="object">TCP</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="is64"/>
        <arg name="object">UDP</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="is64"/>
        <arg name="object">pipe</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
    </test>
    <test name="tcp_udp_two_threads" type="script">
      <objective>Check that there is no crash when the test operates with TCP connection in one thread and sends some data via UDP socket in another thread.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="time2run"/>
        <arg name="iter_num"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_rw_rnd_len" type="script">
      <objective>Check that reading and writing different amounts of data from/to the pipe are handled correctly.</objective>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="writer_child"/>
        <arg name="reader_child"/>
        <arg name="iter_num"/>
        <notes/>
      </iter>
    </test>
    <test name="pipe_write_and_close" type="script">
      <objective>Check that blocking read() operation returns correct result after write() and close() calls on the write end of a pipe.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="data_size"/>
        <arg name="env"/>
        <arg name="parent_write"/>
        <arg name="use_fork"/>
        <notes/>
      </iter>
    </test>
    <test name="close_sock_oth_thread" type="script">
      <objective>Check that closing socket in some thread do not cause crash if there is a blocking function call on this socket in another thread.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">od_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">od_send_raw</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">od_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">od_send_raw</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">connect</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup2</arg>
        <arg name="env"/>
        <arg name="func">accept</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">connect</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">dup3</arg>
        <arg name="env"/>
        <arg name="func">accept</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
        <results tags="linux&amp;v5" key="ON-1646">
          <result value="FAILED">
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINTR</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">onload_zc_send_user_buf</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="v5" notes="Call is not interrupted like others, recvmsg() fails to get completion message from a closed FD">
          <result value="FAILED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
            <verdict>Blocking function call on a socket closed from another thread terminated with errno RPC-EINVAL (error message 'onload_zc_unregister_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">connect</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">accept</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">onload_zc_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">template_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">od_send</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func">close</arg>
        <arg name="env"/>
        <arg name="func">od_send_raw</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="close_func"/>
        <arg name="env"/>
        <arg name="func">sendfile</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Blocking function call was not terminated after closing socket from another thread</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="many_listen_connect_lo" type="script">
      <objective>Check that sequence of steps: socket(), connect() than close() on one process and socket(), bind(), listen() and close() on another process doesn't lead to crash.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="time2run"/>
        <notes/>
        <results tags="v5" key="ON-2217">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>socket_listen_close() unexpectedly fails with error RPC-EADDRINUSE</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="terminate_waitpid" type="script">
      <objective>Check that waitpid() returns expected status after termination of multithreading process by exit() or by a signal.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="quit_other_thread"/>
        <arg name="sa_resethand"/>
        <arg name="send_data"/>
        <arg name="share_stack">TRUE</arg>
        <arg name="sig">SIGSEGV</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-12585">
          <result value="FAILED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
            <verdict>Send from IUT: send() unexpectedly failed with errno RCF_PCH-ERPCTIMEOUT</verdict>
            <verdict>Stack released with lock stuck</verdict>
          </result>
          <result value="PASSED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="quit_other_thread"/>
        <arg name="sa_resethand"/>
        <arg name="send_data"/>
        <arg name="share_stack">FALSE</arg>
        <arg name="sig">SIGSEGV</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-12585">
          <result value="FAILED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
            <verdict>Stack released with lock stuck</verdict>
          </result>
          <result value="PASSED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="quit_other_thread"/>
        <arg name="sa_resethand"/>
        <arg name="send_data"/>
        <arg name="share_stack"/>
        <arg name="sig">SIGUSR1</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGUSR1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="quit_other_thread"/>
        <arg name="sa_resethand"/>
        <arg name="send_data"/>
        <arg name="share_stack">TRUE</arg>
        <arg name="sig">SIGKILL</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-12585">
          <result value="FAILED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
            <verdict>Send from IUT: send() unexpectedly failed with errno RCF_PCH-ERPCTIMEOUT</verdict>
            <verdict>Stack released with lock stuck</verdict>
          </result>
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="quit_other_thread"/>
        <arg name="sa_resethand"/>
        <arg name="send_data"/>
        <arg name="share_stack">FALSE</arg>
        <arg name="sig">SIGKILL</arg>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
          </result>
        </results>
        <results tags="v5" key="ON-12585">
          <result value="FAILED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
            <verdict>Stack released with lock stuck</verdict>
          </result>
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="exit_status"/>
        <arg name="func"/>
        <arg name="quit_other_thread"/>
        <arg name="send_data"/>
        <arg name="share_stack"/>
        <arg name="sock_type"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process exited with status 11</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="sock_exec_many" type="script">
      <objective>Check that in case of sequence socket-exec-socket-exec the number of new sockets is N+C, but not 2*N+C.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="iter_num"/>
        <arg name="read_socket"/>
        <notes/>
        <results tags="v5&amp;pkt_nocomp&amp;!reuse_stack" key="ST-2698" notes="Because of small amount of stacks on medford2 with pkt_nocomp not all sockets can be accelerated">
          <result value="PASSED">
            <verdict>Some created sockets were not accelerated</verdict>
            <verdict>Test caught the SIGUSR2 signal</verdict>
          </result>
        </results>
        <results tags="x3&amp;!reuse_stack" key="ST-2698" notes="Because of small amount of stacks on X3 not all sockets can be accelerated">
          <result value="PASSED">
            <verdict>Some created sockets were not accelerated</verdict>
            <verdict>Test caught the SIGUSR2 signal</verdict>
          </result>
        </results>
        <results tags="ef100&amp;!reuse_stack" key="ST-2698" notes="Because of small amount of stacks on EF100 not all sockets can be accelerated">
          <result value="PASSED">
            <verdict>Some created sockets were not accelerated</verdict>
            <verdict>Test caught the SIGUSR2 signal</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="mtu_usage" type="script">
      <objective>Check that packets of full MTU size are sent and that jumbo frames are processed correctly</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">1500</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="ST-1502" notes="See comments 2, 3 in the bug. Linux sends UDP frames 4 bytes less size than MTU.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are a bit less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">6500</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="ST-1502" notes="See comments 2, 3 in the bug. Linux sends UDP frames 4 bytes less size than MTU.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are a bit less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">1280</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">7000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">9000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len"/>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">6500</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" key="OL 5690" notes="See comment 19 in the bug. Known problem for TCP.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are significantly less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len"/>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">7000</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" key="OL 5690" notes="See comment 19 in the bug. Known problem for TCP.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are significantly less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len"/>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">9000</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
        <results tags="v5" key="OL 5690" notes="See comment 19 in the bug. Known problem for TCP.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are significantly less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">1280</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="OL 5690" notes="See comment 16 in the bug. Both Linux and Onload send UDP frames 4 bytes less size than MTU.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are a bit less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">7000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="OL 5690" notes="See comment 16 in the bug. Both Linux and Onload send UDP frames 4 bytes less size than MTU.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are a bit less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">9000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="OL 5690" notes="See comment 16 in the bug. Both Linux and Onload send UDP frames 4 bytes less size than MTU.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are a bit less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">576</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
        <results tags="linux" key="OL 5690" notes="See comment 16 in the bug. Both Linux and Onload send UDP frames 4 bytes less size than MTU.">
          <result value="FAILED">
            <verdict>Large part of ethernet packets is too small: they are a bit less than MTU in average</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">1500</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">6500</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">576</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">0.8</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">6500</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">0.8</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">7000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">0.8</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">9000</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">1280</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">1.5</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="iut_send"/>
        <arg name="mtu_size">1500</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">0.8</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">576</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">0.8</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">1280</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="data_len">0.8</arg>
        <arg name="env"/>
        <arg name="iut_send"/>
        <arg name="mtu_size">1500</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="chroot_socket" type="script">
      <objective>Create socket (establish connection for TCP), call chroot() and perform action. Check that data transmission works correctly after all.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ON-2272, ON-11136">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ON-2272, ON-11136">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ON-2272, ON-11136">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;!udp_connect_no_handover" key="ON-2272, ON-11136">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag">nonblock</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;ool_loop=0" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag">nonblock</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;ool_loop=0" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag">nonblock</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;ool_loop=0" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag">nonblock</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;ool_loop=0" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag">none</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0)" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag">none</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0)" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag">none</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0)" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag">none</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5&amp;(ool_loop=0)" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
        <results tags="v5&amp;udp_connect_no_handover&amp;laddr_all">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
        <results tags="v5&amp;udp_connect_no_handover&amp;laddr_all">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
        <results tags="v5&amp;udp_connect_no_handover&amp;laddr_all">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
        <results tags="v5&amp;udp_connect_no_handover&amp;laddr_all">
          <result value="PASSED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">TRUE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="FAILED">
            <verdict>Socket created before chroot() is not accelerated</verdict>
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before">FALSE</arg>
        <arg name="sock_flag"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="test_epoll"/>
        <notes/>
        <results tags="v5" key="ON-2272">
          <result value="PASSED">
            <verdict>Socket created after chroot() is not accelerated</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before"/>
        <arg name="sock_flag"/>
        <arg name="sock_type"/>
        <arg name="test_epoll"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="action"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="epoll_func"/>
        <arg name="sock_before"/>
        <arg name="sock_flag"/>
        <arg name="sock_type"/>
        <arg name="test_epoll"/>
        <notes/>
      </iter>
    </test>
    <test name="vfork_prologue" type="script" auxiliary="true">
      <objective/>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="vfork_mode"/>
        <notes/>
      </iter>
    </test>
    <test name="vfork_epilogue" type="script" auxiliary="true">
      <objective/>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="vfork_mode"/>
        <notes/>
      </iter>
    </test>
    <test name="vfork_open_close_exec" type="script">
        <objective>Check behaviour of open()/close()/dup() after vfork() but before execve()</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="vfork_mode"/>
        <arg name="domain"/>
        <notes/>
      </iter>
    </test>
    <test name="vfork_sig_exec" type="script">
      <objective>Check behaviour of sigaction()/sigpcrocmask()/signal()/siginterrupt() after vfork() but before execve()</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="vfork_mode">0</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <arg name="vfork_mode">1</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sigaction</arg>
        <arg name="vfork_mode">2</arg>
        <arg name="domain"/>
        <notes/>
        <results tags="v5" key="ON-12647">
          <result value="FAILED">
            <verdict>Changing signal handler on child process affects the parent process</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">signal</arg>
        <arg name="vfork_mode">2</arg>
        <arg name="domain"/>
        <notes/>
        <results tags="v5" key="ON-12647">
          <result value="FAILED">
            <verdict>Changing signal handler on child process affects the parent process</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">siginterrupt</arg>
        <arg name="vfork_mode">2</arg>
        <arg name="domain"/>
        <notes/>
        <results tags="v5" key="ON-12647">
          <result value="FAILED">
            <verdict>Changing signal handler flags on child process affects the parent process</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">sigprocmask</arg>
        <arg name="vfork_mode">2</arg>
        <arg name="domain"/>
        <notes/>
      </iter>
    </test>
    <test name="vfork_check_hang" type="script">
      <objective>Check that parent process hangs after vfork() untill child performs execve() or _exit()</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_exec"/>
        <arg name="domain"/>
        <arg name="vfork_mode">0</arg>
        <notes/>
        <results tags="v5" key="ON-2313">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_exec"/>
        <arg name="domain"/>
        <arg name="vfork_mode">1</arg>
        <notes/>
        <results tags="v5" key="ON-2313">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_exec"/>
        <arg name="domain"/>
        <arg name="vfork_mode">2</arg>
        <notes/>
      </iter>
    </test>
    <test name="vfork_func_exec" type="script">
      <objective>Check behaviour of async-safe function after vfork() but before execve()</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="vfork_mode">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="vfork_mode">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">pipe</arg>
        <arg name="vfork_mode">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">socket</arg>
        <arg name="vfork_mode">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">accept</arg>
        <arg name="vfork_mode">0</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="vfork_mode">1</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="vfork_mode">1</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">pipe</arg>
        <arg name="vfork_mode">1</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">socket</arg>
        <arg name="vfork_mode">1</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">accept</arg>
        <arg name="vfork_mode">1</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="vfork_mode">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="vfork_mode">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">pipe</arg>
        <arg name="vfork_mode">2</arg>
        <notes/>
        <results tags="v5" key="ON-3032">
          <result value="FAILED"/>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">socket</arg>
        <arg name="vfork_mode">2</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func">accept</arg>
        <arg name="vfork_mode">2</arg>
        <notes/>
      </iter>
    </test>
    <test name="fork_share_sock" type="script">
      <objective>Check that sharing a socket between processes using a unix domain socket works properly.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="popen_multithread_flood" type="script">
      <objective>Check that popen() works properly with multiple threads.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="iterations"/>
        <arg name="threads"/>
        <arg name="popen_iter"/>
        <notes/>
      </iter>
    </test>
    <test name="accept_multiple" type="script">
      <objective>Create many TCP connections, restart RPC servers, try to make a new TCP connection.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="connections"/>
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="many_sockets" type="script">
      <objective/>
      <notes/>
      <iter result="PASSED">
        <arg name="accept"/>
        <arg name="ef_fdtable_size"/>
        <arg name="ef_max_endpoints"/>
        <arg name="ef_max_rx_packets"/>
        <arg name="env"/>
        <arg name="one_stack"/>
        <arg name="proc_num"/>
        <notes/>
      </iter>
    </test>
    <test name="threaded_busy_socket" type="script">
      <objective>Repeatedly call function in child threads, in that time try to do actions (bind, listen or connect) which can lead to the socket handover.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recv</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5716">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5716, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-4658, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-4658, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-4658, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recv</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="func">poll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect"/>
        <arg name="env"/>
        <arg name="func">select</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5716">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5716, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-4658, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-4658, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-4658, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="PASSED"/>
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722, ST-540">
          <result value="FAILED"/>
          <result value="FAILED">
            <verdict>FD is not closed.</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
        <results tags="v5" key="ON-5722">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>Unexpected configuration changes</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">FALSE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">recv</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">TRUE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_DGRAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process">TRUE</arg>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type">SOCK_STREAM</arg>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">TRUE</arg>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">send</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut">FALSE</arg>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect"/>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="func">epoll</arg>
        <arg name="process"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="threaded_nblock_conn" type="script">
      <objective>Perform non-blocking connect and try to send/recive data packets while child threads repeatedly call iomux function.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="sock_type"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <arg name="write"/>
        <notes/>
      </iter>
    </test>
    <test name="threaded_listen" type="script">
      <objective>Perform listen and continue passive connection opening while child threads repeatedly call iomux function.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="threaded_udp" type="script">
      <objective>Perform datagrams transmission while child threads repeatedly call iomux function.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="bind_iut"/>
        <arg name="connect_iut"/>
        <arg name="env"/>
        <arg name="func"/>
        <arg name="length"/>
        <arg name="threads_num"/>
        <arg name="wildcard"/>
        <notes/>
      </iter>
    </test>
    <test name="splice_nonblock" type="script">
      <objective>Test that splice() works correctly on nonblocking pipe and socket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!el&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!el" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env"/>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env"/>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
            <verdict>splice() unexpectedly succeeded instead of failing with EAGAIN</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
        <results tags="(linux&lt;5|linux=5&amp;linux-5&lt;3)&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly blocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&lt;4&amp;!v5" key="ST-1501" notes="On earlier kernels behaviour may differ">
          <result value="FAILED">
            <verdict>splice() was unexpectedly unblocked</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env"/>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
        <results tags="linux&gt;3&amp;!v5" key="ST-2212" notes="Linux bug; hanging splice() does not allow to read all data written before it to pipe">
          <result value="FAILED">
            <verdict>Reading all data from pipe: read() unexpectedly failed with error RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket">FALSE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">FALSE</arg>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock">FALSE</arg>
        <arg name="sock_nonblock">TRUE</arg>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">TRUE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_tst_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_lo_ipv6</arg>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket">TRUE</arg>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env"/>
        <arg name="pipe_nonblock">TRUE</arg>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe"/>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env">VAR.env.peer2peer_fake</arg>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock">TRUE</arg>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock">FALSE</arg>
        <arg name="diff_stacks">FALSE</arg>
        <arg name="env"/>
        <arg name="pipe_nonblock">FALSE</arg>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">TRUE</arg>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks">TRUE</arg>
        <arg name="env"/>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="block_on_pipe">FALSE</arg>
        <arg name="block_on_sock"/>
        <arg name="diff_stacks"/>
        <arg name="env"/>
        <arg name="pipe_nonblock"/>
        <arg name="set_nonblock"/>
        <arg name="sock_nonblock"/>
        <arg name="to_socket"/>
        <arg name="unblock_pipe_first"/>
        <notes/>
      </iter>
    </test>
    <test name="ipv6_recv_ip" type="script">
      <objective>Check that IPv6 socket can receive both IPv4 and IPv6 traffic.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>
    <test name="ipv6_send_ip" type="script">
      <objective>Check that UDP IPv6 socket bound to wildcard address can send data both to IPv6 and IPv4 destinations.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="ipv4_mapped"/>
        <notes/>
      </iter>
    </test>
    <test name="ipv6_ipv4_reuse" type="script">
      <objective>Create IPv4 (IPv6) connected sockets, transmit data over them, close them and do the same for IPv6 (IPv4) sockets of the same type. Check that all works OK.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <arg name="conns_num"/>
        <arg name="ipv4_first"/>
        <notes/>
      </iter>
    </test>
    <test name="../gateways_epilogue" type="script">
      <objective>Epilogue used to reset interfaces after different gateway settings.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="kill_lock_stack" type="script">
      <objective>Check that onload sends RST for TCP socket in locked stack after termination of the process by  exit() or by a signal.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sig">SIGSEGV</arg>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sig">SIGUSR1</arg>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGUSR1</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="sig">SIGKILL</arg>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sig">SIGSEGV</arg>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was cored by the signal SIGSEGV</verdict>
          </result>
        </results>
        <results tags="build_ulhelper" key="ON-12211">
          <result value="FAILED">
            <verdict>poll() returned 1 and sets events to POLLOUT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sig">SIGUSR1</arg>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGUSR1</verdict>
          </result>
        </results>
        <results tags="build_ulhelper" key="ON-12211">
          <result value="FAILED">
            <verdict>poll() returned 1 and sets events to POLLOUT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="sig">SIGKILL</arg>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process was terminated by the signal SIGKILL</verdict>
          </result>
        </results>
        <results tags="build_ulhelper" key="ON-12211">
          <result value="FAILED">
            <verdict>poll() returned 1 and sets events to POLLOUT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="exit_status"/>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process exited with status 11</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="exit_status"/>
        <arg name="term_func"/>
        <notes/>
        <results tags="linux">
          <result value="PASSED">
            <verdict>Child process exited with status 11</verdict>
          </result>
        </results>
        <results tags="build_ulhelper" key="ON-12211">
          <result value="FAILED">
            <verdict>poll() returned 1 and sets events to POLLOUT</verdict>
          </result>
        </results>
      </iter>
    </test>

    <test name="reuseport_bind_zero_port" type="script">
      <objective>Check that bind to zero port work correctly with SO_REUSEPORT option.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="sock_type"/>
        <arg name="use_wildcard"/>
        <notes/>
      </iter>
    </test>

    <test name="threads_system" type="script">
      <objective>Create multiple threads which send/receive traffic and check that a system() call from one of the thread does not hang.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
    <test name="terminate_waitpid_prologue" type="script">
      <objective/>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <notes/>
      </iter>
    </test>

    <test name="socket_via_af_unix_read" type="script">
      <objective>Check that the read functions work with socket received from another process via AF_UNIX</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvmmsg</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
        <results tags="v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvmmsg</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOSYS</verdict>
          </result>
        </results>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error TA_UNIX-ENOTSOCK (error message 'onload_zc_hlrx_alloc() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_recv</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_recv</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recv</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvfrom</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvmsg</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvmmsg</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recv</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvfrom</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvmsg</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recv</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvfrom</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">recvmsg</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_recv</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_hlrx_recv_zc</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">onload_zc_hlrx_recv_copy</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">read</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func">readv</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>


    <test name="socket_via_af_unix_write" type="script">
      <objective>Check that the write functions work with socket received from another process via AF_UNIX</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendmmsg</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
        <results tags="v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOSYS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">template_send</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">onload_zc_send_user_buf</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">onload_zc_send</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendmmsg</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5" notes="recvmmsg() is not supported for TCP socket on onload">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOSYS</verdict>
          </result>
        </results>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">template_send</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5" key="template_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-EOPNOTSUPP</verdict>
          </result>
        </results>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ESOCKTNOSUPPORT</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">onload_zc_send_user_buf</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_send_user_buf() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-EOPNOTSUPP</verdict>
          </result>
        </results>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ESOCKTNOSUPPORT (error message 'onload_zc_register_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">onload_zc_send</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5" notes="onload_zc_send() is not supported for UDP sockets">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-EOPNOTSUPP</verdict>
          </result>
        </results>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ESOCKTNOSUPPORT (error message 'onload_zc_alloc_buffers() failed')</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="send_func">od_send</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="send_func">od_send_raw</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="send_func">od_send</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="send_func">od_send_raw</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">send</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendto</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendmsg</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendmmsg</arg>
        <arg name="sock_type">udp</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">send</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendto</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendmsg</arg>
        <arg name="sock_type">tcp_active</arg>
        <notes/>
        <results tags="v5&amp;libc_close&amp;reuse_pco&amp;!reuse_stack" key="ON-12831">
          <result value="FAILED">
            <verdict>Sending function failed with unexpected error RPC-ENOTSOCK</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="send_func">od_send</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer</arg>
        <arg name="send_func">od_send_raw</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">send</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendto</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">sendmsg</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">onload_zc_send</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">onload_zc_send_user_buf</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">template_send</arg>
        <arg name="sock_type">tcp_passive</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="send_func">od_send</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env">VAR.env.peer2peer_ipv6</arg>
        <arg name="send_func">od_send_raw</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">write</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="send_func">writev</arg>
        <arg name="sock_type"/>
        <notes/>
      </iter>
    </test>

    <test name="pipe_via_af_unix" type="script">
      <objective>Check that the read/write functions work with pipe FD received from another process via AF_UNIX</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="is_read"/>
        <notes/>
      </iter>
    </test>

    <test name="listen_via_af_unix" type="script">
      <objective>Check that a listening socket received from another process via AF_UNIX can accept connections.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="func"/>
        <notes/>
      </iter>
    </test>
    <test name="pthread_cancellation_point" type="script">
        <objective>perfom pthread_cancel while thread is blocked in function which is cancellation point and check that thread is cancelled</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="state">disable</arg>
        <arg name="type"/>
        <arg name="func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="state">enable</arg>
        <arg name="type">async</arg>
        <arg name="func"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="state">enable</arg>
        <arg name="type">deferred</arg>
        <arg name="func"/>
        <notes/>
        <results tags="v5" key="ON-12970">
          <result value="PASSED"/>
          <result value="FAILED">
            <verdict>thread was not finished after cancelling with RPC_PTHREAD_CANCEL_ENABLE state, ptread_join failed with errno: RCF_PCH-ERPCTIMEOUT</verdict>
          </result>
        </results>
      </iter>
    </test>
    <test name="diff_ipvlan_macvlan_check" type="script">
      <objective>The test should check that IP VLAN/MAC VLAN interface receives packets with correct destination IP/MAC, and check that the interface does not receive packets with a wrong destination IP.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_macvlan"/>
        <arg name="use_netns">FALSE</arg>
        <notes/>
        <results tags="(v5|zf_shim)" key="ON-12773">
          <result value="FAILED">
            <verdict>Socket 'iut_s' is not expected to be readable, but it is</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_macvlan"/>
        <arg name="use_netns">TRUE</arg>
        <notes/>
      </iter>
    </test>
    <test name="diff_vlan_check_id" type="script">
      <objective>Check that received packets have correct VLAN tag</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="use_netns"/>
        <arg name="vlan1"/>
        <arg name="vlan2"/>
        <notes/>
      </iter>
    </test>
  </iter>
</test>
